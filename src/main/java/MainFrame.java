
import java.awt.*;
import java.io.*;
import javax.swing.*;
import javax.swing.table.*;

import java.sql.*;
import java.text.SimpleDateFormat;
import java.time.LocalDate;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author thandeka.matrose
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        LocalDate date = LocalDate.parse("2003-03-23");
        System.out.println(date.getDayOfWeek());
        beforeProgramme();
        initComponents();
        startUpGUIFormat();
        refreshProgramme();
        
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jScrollBar1 = new javax.swing.JScrollBar();
        desktoppnlContainer = new javax.swing.JDesktopPane();
        pnlHomeScreen = new javax.swing.JPanel();
        lblLogo = new javax.swing.JLabel();
        lblAppNameWave = new javax.swing.JLabel();
        lblAppNameBreaker = new javax.swing.JLabel();
        lblAppNameApplication = new javax.swing.JLabel();
        pnlAppHomeBackground = new javax.swing.JPanel();
        pnlHousehold = new javax.swing.JPanel();
        scrlpneLstHousehold = new javax.swing.JScrollPane();
        lstHousehold = new javax.swing.JList<>();
        desktoppnlHousehold = new javax.swing.JDesktopPane();
        pnlHouseholdAbout = new javax.swing.JPanel();
        lblHouseholdAddress = new javax.swing.JLabel();
        lblHouseholdCoordinates = new javax.swing.JLabel();
        lblHouseholdOccupants = new javax.swing.JLabel();
        lblNumberOfOccupants = new javax.swing.JLabel();
        lblCoordinates = new javax.swing.JLabel();
        lblAddress = new javax.swing.JLabel();
        lblHouseholdGoogleMaps = new javax.swing.JLabel();
        btnHouseholdGoogleMaps = new javax.swing.JButton();
        btnHouseholdDirectionsToCentre = new javax.swing.JButton();
        btnCentreDetails = new javax.swing.JButton();
        lblHouseholdClosestCentre = new javax.swing.JLabel();
        sptrHouseholdGenInfo = new javax.swing.JSeparator();
        lblClosestCentre = new javax.swing.JLabel();
        lblHouseholdgenInfoHeader = new javax.swing.JLabel();
        lblHouseholdZipCode = new javax.swing.JLabel();
        pnlHouseholdOccupants = new javax.swing.JPanel();
        lblHouseholdOccupantInfoHeader = new javax.swing.JLabel();
        lblHouseholdOccupantRiskLevel1 = new javax.swing.JLabel();
        txfHouseholdRisk1 = new javax.swing.JTextField();
        lblHouseholdOccupantRiskLevel2 = new javax.swing.JLabel();
        lblHouseholdOccupantRiskLevel3 = new javax.swing.JLabel();
        lblHouseholdOccupantRiskLevel4 = new javax.swing.JLabel();
        txfHouseholdRisk2 = new javax.swing.JTextField();
        txfHouseholdRisk3 = new javax.swing.JTextField();
        txfHouseholdRisk4 = new javax.swing.JTextField();
        scrlpneTblOccupants = new javax.swing.JScrollPane();
        tblHouseholdInternalOccupants = new javax.swing.JTable();
        lblHouseholdOccupantAvgAge = new javax.swing.JLabel();
        lblHouseholdOccupantVaccinated = new javax.swing.JLabel();
        lblNumOccupants = new javax.swing.JLabel();
        txfHouseholdInternalOccupantsNumVaccinated = new javax.swing.JTextField();
        txfHouseholdOccupantAvgAge = new javax.swing.JTextField();
        lblHouseholdOccupantYearAge = new javax.swing.JLabel();
        pnlHouseholdNewHousehold = new javax.swing.JPanel();
        lblHouseholdNewAddress = new javax.swing.JLabel();
        lblHouseholdNewLatitude = new javax.swing.JLabel();
        spnHouseholdNewLatDegrees = new javax.swing.JSpinner();
        spnHouseholdNewLatMinutes = new javax.swing.JSpinner();
        spnHouseholdNewLatSeconds = new javax.swing.JSpinner();
        lblHouseholdNewLatDegree = new javax.swing.JLabel();
        lblHouseholdNewLongDegree = new javax.swing.JLabel();
        lblHouseholdNewLatSec = new javax.swing.JLabel();
        txfHouseholdNewAddress = new javax.swing.JTextField();
        btnHouseholdNewConfirm = new javax.swing.JButton();
        btnHouseholdNewCancel = new javax.swing.JButton();
        lblHouseholdNewLat = new javax.swing.JLabel();
        spnHouseholdNewLongDegrees = new javax.swing.JSpinner();
        lblHouseholdNewLongDeg = new javax.swing.JLabel();
        spnHouseholdNewLongMinutes = new javax.swing.JSpinner();
        lblHouseholdNewLongMin = new javax.swing.JLabel();
        spnHouseholdNewLongSeconds = new javax.swing.JSpinner();
        lblHouseholdNewLongSec = new javax.swing.JLabel();
        lblHouseholdNewHeader = new javax.swing.JLabel();
        lblHouseholdPreviewCoordinates = new javax.swing.JLabel();
        btnHouseholdNewPreviewDecCoord = new javax.swing.JButton();
        lblHouseholdNewZip = new javax.swing.JLabel();
        txfHouseholdNewZipCode = new javax.swing.JTextField();
        lblHouseholdNewLatNegSign = new javax.swing.JLabel();
        btnHouseholdAbout = new javax.swing.JButton();
        btnHouseholdOccupants = new javax.swing.JButton();
        btnHouseholdNewHousehold = new javax.swing.JButton();
        btnFirstLstHousehold = new javax.swing.JButton();
        btnLastLstHousehold = new javax.swing.JButton();
        btnPreviousLstHousehold = new javax.swing.JButton();
        btnNextLstHousehold = new javax.swing.JButton();
        lblHouseholdPnlHeading = new javax.swing.JLabel();
        pnlVaccinationLog = new javax.swing.JPanel();
        lblVaccinationLogHeader = new javax.swing.JLabel();
        pnlButtonContainer = new javax.swing.JPanel();
        btnVaccinationLogSelect = new javax.swing.JButton();
        btnVaccinationLogForward = new javax.swing.JButton();
        btnVaccinationLogBack = new javax.swing.JButton();
        btnVaccinationLogBrand = new javax.swing.JButton();
        btnVaccinationLogCentre = new javax.swing.JButton();
        btnVaccinationLogDate = new javax.swing.JButton();
        btnVaccinationLogCitizen = new javax.swing.JButton();
        lblVaccinationSortBy = new javax.swing.JLabel();
        sptrVaccinationHeaderfromButton = new javax.swing.JSeparator();
        scrlpneTblVaccinationTable = new javax.swing.JScrollPane();
        tblVaccination = new javax.swing.JTable();
        pnlUserManagement = new javax.swing.JPanel();
        lblAddingUserCaution = new javax.swing.JLabel();
        btnSendMessage = new javax.swing.JButton();
        lblMessageUser = new javax.swing.JLabel();
        cmbMessageUser = new javax.swing.JComboBox<>();
        btnUsersMessagesRefresh = new javax.swing.JButton();
        lblYourInbox = new javax.swing.JLabel();
        txfUserMessage = new javax.swing.JTextField();
        desktoppnlUser = new javax.swing.JDesktopPane();
        pnlAboutUser = new javax.swing.JPanel();
        lblUserInfoHeader = new javax.swing.JLabel();
        lblUserOwnName = new javax.swing.JLabel();
        lblUserHomeAddress = new javax.swing.JLabel();
        lblUserName = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        btnAddUser = new javax.swing.JButton();
        pnlAddUser = new javax.swing.JPanel();
        lblAddUserHeader = new javax.swing.JLabel();
        cmbNewUserCitizens = new javax.swing.JComboBox<>();
        ckbxHasAdmin = new javax.swing.JCheckBox();
        lblAddUserName = new javax.swing.JLabel();
        txfNewUsername = new javax.swing.JTextField();
        lblAddUserCitizenProfile = new javax.swing.JLabel();
        btnAddUserConfirm = new javax.swing.JButton();
        sptrAddUser = new javax.swing.JSeparator();
        lblUserEmail = new javax.swing.JLabel();
        txfNewEmail = new javax.swing.JTextField();
        btnAddUserCancel = new javax.swing.JButton();
        scrlpneUserMessages = new javax.swing.JScrollPane();
        txaUserInfoLog = new javax.swing.JTextArea();
        lblMessagingPortalHeader = new javax.swing.JLabel();
        sptrMessagesfromSend = new javax.swing.JSeparator();
        btnChangeUsername = new javax.swing.JButton();
        pnlCitizen = new javax.swing.JPanel();
        scrlpneLstCitizen = new javax.swing.JScrollPane();
        lstCitizen = new javax.swing.JList<>();
        desktoppnlCitizen = new javax.swing.JDesktopPane();
        pnlCitizenAbout = new javax.swing.JPanel();
        lblCitizenFirstName = new javax.swing.JLabel();
        txfCitizenInternalFirstName = new javax.swing.JTextField();
        lblCitizenGeneralInfo = new javax.swing.JLabel();
        btnUpdateCitizen = new javax.swing.JButton();
        txfCitizenInternalVaccinationStatus = new javax.swing.JTextField();
        txfCitizenInternalContactNumber = new javax.swing.JTextField();
        lblCitizenAge = new javax.swing.JLabel();
        lblCitizenSex = new javax.swing.JLabel();
        lblCitizenCitizenship = new javax.swing.JLabel();
        lblCitizenStatus = new javax.swing.JLabel();
        lblCitizenRiskLevel = new javax.swing.JLabel();
        lblCitizenContactNumber = new javax.swing.JLabel();
        lblCitizenYearsOld = new javax.swing.JLabel();
        lblInternalAge = new javax.swing.JLabel();
        lblCitizenInternalSex = new javax.swing.JLabel();
        lblCitizenInternalSACitizen = new javax.swing.JLabel();
        lblCitizenInternalRiskLevel = new javax.swing.JLabel();
        txfCitizenInternalLastName = new javax.swing.JTextField();
        lblCitizenLastName = new javax.swing.JLabel();
        pnlCitizenAddCitizen = new javax.swing.JPanel();
        lblNewCitizenLastName = new javax.swing.JLabel();
        lblNewCitizenIDNumber = new javax.swing.JLabel();
        lblNewCitizenContactNumber = new javax.swing.JLabel();
        sdrRiskLevel = new javax.swing.JSlider();
        lblNewCitizenRiskLevel = new javax.swing.JLabel();
        lblNewCitizenAddress = new javax.swing.JLabel();
        lblNewCitizenHeader = new javax.swing.JLabel();
        btnCitizenNewCitizenCancel = new javax.swing.JButton();
        txfCitizenNewLastName = new javax.swing.JTextField();
        txfCitizenNewPersonalId = new javax.swing.JTextField();
        txfCitizenNewContactNumber = new javax.swing.JTextField();
        cmbHouseholdArr = new javax.swing.JComboBox<>();
        btnCitizenNewCitizenConfirm = new javax.swing.JButton();
        btnCitizenNewHelp = new javax.swing.JButton();
        lblNewCitizenFirstName = new javax.swing.JLabel();
        txfCitizenNewFirstName = new javax.swing.JTextField();
        pnlCitizenHousehold = new javax.swing.JPanel();
        btnCitizenMoveConfirm = new javax.swing.JButton();
        lblCitizenHouseholdAddressHeader = new javax.swing.JLabel();
        lblCitizenHomeAddress = new javax.swing.JLabel();
        lblCitizenHouseholdCentreHeader = new javax.swing.JLabel();
        lblCitizenClosestCentre = new javax.swing.JLabel();
        sptrCitizenHouseholdMove = new javax.swing.JSeparator();
        lblCitizenHouseholdMove = new javax.swing.JLabel();
        cmbCitizenHouseholdMove = new javax.swing.JComboBox<>();
        btnCitizenInfo = new javax.swing.JButton();
        btnCitizenAddCitizen = new javax.swing.JButton();
        btnCitizenHousehold = new javax.swing.JButton();
        lblCitizenHeader = new javax.swing.JLabel();
        btnFirstLstCitizen = new javax.swing.JButton();
        btnLastLstCitizen = new javax.swing.JButton();
        btnPreviousLstCitizen = new javax.swing.JButton();
        btnNextLstCitizen = new javax.swing.JButton();
        pnlCentre = new javax.swing.JPanel();
        scrlpneLstCentre = new javax.swing.JScrollPane();
        lstCentre = new javax.swing.JList<>();
        desktoppnlCentre = new javax.swing.JDesktopPane();
        pnlCentreInternalRecentVaccination = new javax.swing.JPanel();
        scrlpneRecentVaccination = new javax.swing.JScrollPane();
        txaRecentVaccinations = new javax.swing.JTextArea();
        lblRecentVaccinationHeader = new javax.swing.JLabel();
        pnlCentreDeliver = new javax.swing.JPanel();
        cmbAcquisitionBrand = new javax.swing.JComboBox<>();
        lblCentreDeliverHeader = new javax.swing.JLabel();
        lblCentreBrandDeliver = new javax.swing.JLabel();
        lblCentreDoses = new javax.swing.JLabel();
        btnCentreDosesDeliver = new javax.swing.JButton();
        spnCentreAcquistionsDoses = new javax.swing.JSpinner();
        pnlCentreInternalNewCentre = new javax.swing.JPanel();
        lblNewCentre = new javax.swing.JLabel();
        lblNewCentreAddress = new javax.swing.JLabel();
        txfCentreNewName = new javax.swing.JTextField();
        lblNewCentreName = new javax.swing.JLabel();
        txfCentreNewAddress = new javax.swing.JTextField();
        lblNewCentreLatitude = new javax.swing.JLabel();
        spn1 = new javax.swing.JSpinner();
        lblCentreNewLatDegree = new javax.swing.JLabel();
        lblCentreNewLongitude = new javax.swing.JLabel();
        spn4 = new javax.swing.JSpinner();
        lblCentreNewLongDegree = new javax.swing.JLabel();
        spn5 = new javax.swing.JSpinner();
        spn2 = new javax.swing.JSpinner();
        lblCentreNewLatMin = new javax.swing.JLabel();
        lblCentreNewLongMin = new javax.swing.JLabel();
        spn3 = new javax.swing.JSpinner();
        spn6 = new javax.swing.JSpinner();
        lblCentreNewLatSec = new javax.swing.JLabel();
        lblCentreNewLongSec = new javax.swing.JLabel();
        btnCentreNewConfirm = new javax.swing.JButton();
        btnNewCentreCancel = new javax.swing.JButton();
        txfCentreNewZipCode = new javax.swing.JTextField();
        lblNewCentreZipCode = new javax.swing.JLabel();
        lblMinusSign = new javax.swing.JLabel();
        pnlCentreInternalAbout = new javax.swing.JPanel();
        lblCentreName = new javax.swing.JLabel();
        lblCentreAddress = new javax.swing.JLabel();
        lblCentreNumVaccines = new javax.swing.JLabel();
        txfCentreAddress = new javax.swing.JTextField();
        txfCentreName = new javax.swing.JTextField();
        lblCentreGenInfo = new javax.swing.JLabel();
        txfCentreZipCode = new javax.swing.JTextField();
        btnCentreUpdate = new javax.swing.JButton();
        btnDeleteCentre = new javax.swing.JButton();
        lblCentreCoordina = new javax.swing.JLabel();
        lblCentreNumVaccine = new javax.swing.JLabel();
        lblCentreCoordinates = new javax.swing.JLabel();
        btnCentreInternalMoreInfo = new javax.swing.JButton();
        btnCentreInternalVaccination = new javax.swing.JButton();
        btnCentreInternalNewCentre = new javax.swing.JButton();
        btnLstCentreFirst = new javax.swing.JButton();
        btnLstCentrePrev = new javax.swing.JButton();
        btnLstCentreLast = new javax.swing.JButton();
        btnLstCentreNext = new javax.swing.JButton();
        lblCentreHeader = new javax.swing.JLabel();
        pnlHelp = new javax.swing.JPanel();
        pnlHome = new javax.swing.JPanel();
        btnOpenGuide = new javax.swing.JButton();
        lblOpenUserGuide = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        pnlOurProgress = new javax.swing.JPanel();
        scrlpneTblZipVaccination = new javax.swing.JScrollPane();
        tblAboutVaccinations = new javax.swing.JTable();
        pnlCapeTownInfo = new javax.swing.JPanel();
        lblRegCitizens = new javax.swing.JLabel();
        lblVaccAdministered = new javax.swing.JLabel();
        lblVaccCentre = new javax.swing.JLabel();
        lblInfoVaccineCentres = new javax.swing.JLabel();
        lblInfoVaccinesAdministered = new javax.swing.JLabel();
        lblRegisteredCitizens = new javax.swing.JLabel();
        scrlpneCapeTownInfo = new javax.swing.JScrollPane();
        txaCapeTownInfo = new javax.swing.JTextArea();
        lblCapeTownNameHeader = new javax.swing.JLabel();
        lblCapeTownNameTranslate = new javax.swing.JLabel();
        lblCapeTownImage = new javax.swing.JLabel();
        pnlBrandInfo = new javax.swing.JPanel();
        scrlpneBrandInfo = new javax.swing.JScrollPane();
        txaBrandInfo = new javax.swing.JTextArea();
        btnInfoBrandForward = new javax.swing.JButton();
        btnInfoBrandBackward = new javax.swing.JButton();
        lblVaccineBrandHeader = new javax.swing.JLabel();
        btnAddBrand = new javax.swing.JButton();
        lblWhereWeVaccinateHeader = new javax.swing.JLabel();
        pnlAddVaccination = new javax.swing.JPanel();
        pnlVaccinationDetails = new javax.swing.JPanel();
        lblAddVaccinationCitizenConfirmHeader = new javax.swing.JLabel();
        lblPreviewAge = new javax.swing.JLabel();
        lblPreviewRiskLevel = new javax.swing.JLabel();
        lblPreviewName = new javax.swing.JLabel();
        lblPreviewID = new javax.swing.JLabel();
        lblAddVaccinationCentreConfirmHeader = new javax.swing.JLabel();
        lblPreviewCentreName = new javax.swing.JLabel();
        lblPreviewCentreDistance = new javax.swing.JLabel();
        lblAddVaccinationBrandConfirmHeader = new javax.swing.JLabel();
        lblPreviewBrandCommonName = new javax.swing.JLabel();
        lblPreviewBrandName = new javax.swing.JLabel();
        lblAddVaccinationDateConfirmHeader = new javax.swing.JLabel();
        desktoppnlNewVaccination = new javax.swing.JDesktopPane();
        pnlNewVaccinationCitizen = new javax.swing.JPanel();
        cmbAddVaccinationCitizen = new javax.swing.JComboBox<>();
        lblAddVaccinationCitizenInstruct1 = new javax.swing.JLabel();
        lblAddVaccinationCitizenHeader = new javax.swing.JLabel();
        lblAddVaccinationCitizenInstruct2 = new javax.swing.JLabel();
        btnAddVaccinationCitizenNext = new javax.swing.JButton();
        pnlNewVaccinationCentre = new javax.swing.JPanel();
        cmbAddVaccinationCentre = new javax.swing.JComboBox<>();
        lblAddVaccinationCentreHeader = new javax.swing.JLabel();
        lblAddVaccinationCentreInstruct = new javax.swing.JLabel();
        btnAddVaccinationCentreBack = new javax.swing.JButton();
        btnAddVaccinationCentreNext = new javax.swing.JButton();
        pnlConfirmation = new javax.swing.JPanel();
        btnNewVaccinationVaccinate = new javax.swing.JButton();
        lblAddVaccinationDate = new javax.swing.JLabel();
        lblAddVaccinationConfirmHeader = new javax.swing.JLabel();
        btnAddVaccinationBack = new javax.swing.JButton();
        spnDate = new javax.swing.JSpinner();
        pnlNewVaccinationBrand = new javax.swing.JPanel();
        cmbAddVaccinationBrand = new javax.swing.JComboBox<>();
        lblAddVaccinationBrandHeader = new javax.swing.JLabel();
        btnAddVaccinationBrandNext = new javax.swing.JButton();
        btnAddVaccinationBrandBack = new javax.swing.JButton();
        lblAddVaccinationBrandInstruct = new javax.swing.JLabel();
        lblAddVaccinationHeader = new javax.swing.JLabel();
        lblPortalHeader = new javax.swing.JLabel();
        lblAddVaccinationInstructHeader = new javax.swing.JLabel();
        lblAddVaccinationInstruct1 = new javax.swing.JLabel();
        lblAddVaccinationInstruct2 = new javax.swing.JLabel();
        lblAddVaccinationInstruct3 = new javax.swing.JLabel();
        lblAddVaccinationInstruct4 = new javax.swing.JLabel();
        lblAddVaccinationInstruct5 = new javax.swing.JLabel();
        pnlAcquisition = new javax.swing.JPanel();
        txfSupplyLeft = new javax.swing.JTextField();
        scrlpneBrandList = new javax.swing.JScrollPane();
        lstBrand = new javax.swing.JList<>();
        scrlpaneTblAcquisitions = new javax.swing.JScrollPane();
        tblCentreVaccines = new javax.swing.JTable();
        txfTotalDoses = new javax.swing.JTextField();
        lblTotalOfBrand = new javax.swing.JLabel();
        lblTotalRemainingOfBrand = new javax.swing.JLabel();
        lblTotalVaccinesUnaddressed = new javax.swing.JLabel();
        txfTotalVaccinesUnaddress = new javax.swing.JTextField();
        sptrTotalBrandfromReserve = new javax.swing.JSeparator();
        pnlShipment = new javax.swing.JPanel();
        btnDosesReceived = new javax.swing.JButton();
        lblShipmentHeader = new javax.swing.JLabel();
        cmbAcquisitionsCapeReserveBrands = new javax.swing.JComboBox<>();
        lblShipmentDoses = new javax.swing.JLabel();
        spnAcquisitionDoses = new javax.swing.JSpinner();
        lblCapeTownReserve = new javax.swing.JLabel();
        lblCapeTownAddress = new javax.swing.JLabel();
        lblCapeTownZipCode = new javax.swing.JLabel();
        lblCapeTownAddressHeader = new javax.swing.JLabel();
        sptrAcquisitionsFromDeliveries = new javax.swing.JSeparator();
        lblDeliveriesHeader = new javax.swing.JLabel();
        btnVaccinationPanel = new javax.swing.JButton();
        btnCentrePanel = new javax.swing.JButton();
        btnHouseholdPanel = new javax.swing.JButton();
        btnCitizenPanel = new javax.swing.JButton();
        btnNewVaccinationPanel = new javax.swing.JButton();
        btnHelpPanel = new javax.swing.JButton();
        btnOurProgressPanel = new javax.swing.JButton();
        btnAcquisitionsPanel = new javax.swing.JButton();
        lblAccessLevel = new javax.swing.JLabel();
        lblUsername = new javax.swing.JLabel();
        lblUserAccessLevel = new javax.swing.JLabel();
        lblUserUsername = new javax.swing.JLabel();
        sptrButton1 = new javax.swing.JSeparator();
        sptrBottom = new javax.swing.JSeparator();
        lblwelcome = new javax.swing.JLabel();
        btnUserManagement = new javax.swing.JButton();
        lblLogoWavebreaker = new javax.swing.JLabel();
        lblLogoApplication = new javax.swing.JLabel();
        sptrTopLogo = new javax.swing.JSeparator();
        sptrBottomLogo = new javax.swing.JSeparator();
        lblBackground = new javax.swing.JLabel();

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(1080, 635));
        getContentPane().setLayout(null);

        desktoppnlContainer.setBackground(new java.awt.Color(204, 204, 204));
        desktoppnlContainer.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 5, true));
        desktoppnlContainer.setToolTipText("");
        desktoppnlContainer.setLayout(new java.awt.CardLayout());

        pnlHomeScreen.setLayout(null);
        pnlHomeScreen.add(lblLogo);
        lblLogo.setBounds(340, 80, 160, 160);

        lblAppNameWave.setBackground(new java.awt.Color(0, 153, 153));
        lblAppNameWave.setFont(new java.awt.Font("Morganite", 0, 120)); // NOI18N
        lblAppNameWave.setForeground(new java.awt.Color(0, 153, 153));
        lblAppNameWave.setText("WAVE");
        pnlHomeScreen.add(lblAppNameWave);
        lblAppNameWave.setBounds(280, 260, 107, 120);

        lblAppNameBreaker.setFont(new java.awt.Font("Morganite", 0, 120)); // NOI18N
        lblAppNameBreaker.setText("BREAKER");
        pnlHomeScreen.add(lblAppNameBreaker);
        lblAppNameBreaker.setBounds(390, 260, 170, 120);

        lblAppNameApplication.setFont(new java.awt.Font("Hiragino Sans", 0, 24)); // NOI18N
        lblAppNameApplication.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAppNameApplication.setText("a p p l i c a t i o n");
        lblAppNameApplication.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pnlHomeScreen.add(lblAppNameApplication);
        lblAppNameApplication.setBounds(290, 360, 250, 40);

        pnlAppHomeBackground.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout pnlAppHomeBackgroundLayout = new javax.swing.GroupLayout(pnlAppHomeBackground);
        pnlAppHomeBackground.setLayout(pnlAppHomeBackgroundLayout);
        pnlAppHomeBackgroundLayout.setHorizontalGroup(
            pnlAppHomeBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 720, Short.MAX_VALUE)
        );
        pnlAppHomeBackgroundLayout.setVerticalGroup(
            pnlAppHomeBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 410, Short.MAX_VALUE)
        );

        pnlHomeScreen.add(pnlAppHomeBackground);
        pnlAppHomeBackground.setBounds(50, 40, 720, 410);

        desktoppnlContainer.add(pnlHomeScreen, "card11");

        lstHousehold.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstHouseholdValueChanged(evt);
            }
        });
        scrlpneLstHousehold.setViewportView(lstHousehold);

        desktoppnlHousehold.setLayout(new java.awt.CardLayout());

        pnlHouseholdAbout.setBackground(new java.awt.Color(255, 255, 255));

        lblHouseholdAddress.setText("Address:");

        lblHouseholdCoordinates.setText("Coordinates:");

        lblHouseholdOccupants.setText("Number of Occupants:");

        lblNumberOfOccupants.setText(" ");

        lblCoordinates.setText(" ");

        lblAddress.setText(" ");

        lblHouseholdGoogleMaps.setText("Show Location on Google Maps");

        btnHouseholdGoogleMaps.setText("Search");
        btnHouseholdGoogleMaps.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnHouseholdGoogleMapsMouseClicked(evt);
            }
        });

        btnHouseholdDirectionsToCentre.setText("Directions to Centre");
        btnHouseholdDirectionsToCentre.setToolTipText("Opens Google Chrome tab with directions to nearest Centre");
        btnHouseholdDirectionsToCentre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnHouseholdDirectionsToCentreMouseClicked(evt);
            }
        });

        btnCentreDetails.setText("Get Info About Centre");
        btnCentreDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCentreDetailsMouseClicked(evt);
            }
        });

        lblHouseholdClosestCentre.setText("Closest Centre:");

        lblClosestCentre.setText(" ");

        lblHouseholdgenInfoHeader.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblHouseholdgenInfoHeader.setText("General Information");

        lblHouseholdZipCode.setText(" ");

        javax.swing.GroupLayout pnlHouseholdAboutLayout = new javax.swing.GroupLayout(pnlHouseholdAbout);
        pnlHouseholdAbout.setLayout(pnlHouseholdAboutLayout);
        pnlHouseholdAboutLayout.setHorizontalGroup(
            pnlHouseholdAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHouseholdAboutLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(pnlHouseholdAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlHouseholdAboutLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(btnHouseholdDirectionsToCentre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCentreDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(lblClosestCentre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlHouseholdAboutLayout.createSequentialGroup()
                        .addGroup(pnlHouseholdAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblHouseholdClosestCentre, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlHouseholdAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlHouseholdAboutLayout.createSequentialGroup()
                                    .addComponent(lblHouseholdGoogleMaps)
                                    .addGap(60, 60, 60)
                                    .addComponent(btnHouseholdGoogleMaps))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlHouseholdAboutLayout.createSequentialGroup()
                                    .addGroup(pnlHouseholdAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(lblHouseholdCoordinates, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblHouseholdOccupants, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(pnlHouseholdAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(lblCoordinates, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                                        .addComponent(lblNumberOfOccupants, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                                        .addComponent(lblHouseholdZipCode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addComponent(sptrHouseholdGenInfo, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(lblHouseholdgenInfoHeader)
                            .addGroup(pnlHouseholdAboutLayout.createSequentialGroup()
                                .addComponent(lblHouseholdAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(59, Short.MAX_VALUE))))
        );
        pnlHouseholdAboutLayout.setVerticalGroup(
            pnlHouseholdAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHouseholdAboutLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(lblHouseholdgenInfoHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlHouseholdAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHouseholdAddress)
                    .addComponent(lblAddress))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblHouseholdZipCode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(pnlHouseholdAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHouseholdCoordinates)
                    .addComponent(lblCoordinates))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlHouseholdAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHouseholdOccupants)
                    .addComponent(lblNumberOfOccupants))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlHouseholdAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHouseholdGoogleMaps)
                    .addComponent(btnHouseholdGoogleMaps))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sptrHouseholdGenInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblHouseholdClosestCentre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblClosestCentre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlHouseholdAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCentreDetails)
                    .addComponent(btnHouseholdDirectionsToCentre))
                .addGap(29, 29, 29))
        );

        desktoppnlHousehold.add(pnlHouseholdAbout, "card2");

        pnlHouseholdOccupants.setBackground(new java.awt.Color(255, 255, 255));

        lblHouseholdOccupantInfoHeader.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        lblHouseholdOccupantInfoHeader.setText("Occupant Information");

        lblHouseholdOccupantRiskLevel1.setText("Risk Level 1:");

        lblHouseholdOccupantRiskLevel2.setText("Risk Level 2:");

        lblHouseholdOccupantRiskLevel3.setText("Risk Level 3:");

        lblHouseholdOccupantRiskLevel4.setText("Risk Level 4:");

        tblHouseholdInternalOccupants.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Risk Level"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        scrlpneTblOccupants.setViewportView(tblHouseholdInternalOccupants);
        if (tblHouseholdInternalOccupants.getColumnModel().getColumnCount() > 0) {
            tblHouseholdInternalOccupants.getColumnModel().getColumn(0).setPreferredWidth(115);
        }

        lblHouseholdOccupantAvgAge.setText("Average Age of Household");

        lblHouseholdOccupantVaccinated.setText("Occupants Vaccinated");

        lblNumOccupants.setText("/0");

        lblHouseholdOccupantYearAge.setText("years of age");

        javax.swing.GroupLayout pnlHouseholdOccupantsLayout = new javax.swing.GroupLayout(pnlHouseholdOccupants);
        pnlHouseholdOccupants.setLayout(pnlHouseholdOccupantsLayout);
        pnlHouseholdOccupantsLayout.setHorizontalGroup(
            pnlHouseholdOccupantsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHouseholdOccupantsLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(pnlHouseholdOccupantsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlHouseholdOccupantsLayout.createSequentialGroup()
                        .addComponent(lblHouseholdOccupantInfoHeader)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlHouseholdOccupantsLayout.createSequentialGroup()
                        .addComponent(scrlpneTblOccupants, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlHouseholdOccupantsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblHouseholdOccupantRiskLevel3)
                            .addComponent(lblHouseholdOccupantRiskLevel4)
                            .addComponent(lblHouseholdOccupantRiskLevel2)
                            .addComponent(lblHouseholdOccupantRiskLevel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                        .addGroup(pnlHouseholdOccupantsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlHouseholdOccupantsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txfHouseholdRisk3, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                                .addComponent(txfHouseholdRisk2, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txfHouseholdRisk1))
                            .addComponent(txfHouseholdRisk4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25))
                    .addGroup(pnlHouseholdOccupantsLayout.createSequentialGroup()
                        .addGroup(pnlHouseholdOccupantsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblHouseholdOccupantVaccinated, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblHouseholdOccupantAvgAge, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlHouseholdOccupantsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txfHouseholdInternalOccupantsNumVaccinated, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                            .addComponent(txfHouseholdOccupantAvgAge))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlHouseholdOccupantsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNumOccupants)
                            .addComponent(lblHouseholdOccupantYearAge))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        pnlHouseholdOccupantsLayout.setVerticalGroup(
            pnlHouseholdOccupantsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlHouseholdOccupantsLayout.createSequentialGroup()
                .addGroup(pnlHouseholdOccupantsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlHouseholdOccupantsLayout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addGroup(pnlHouseholdOccupantsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblHouseholdOccupantRiskLevel1)
                            .addComponent(txfHouseholdRisk1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlHouseholdOccupantsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblHouseholdOccupantRiskLevel2)
                            .addComponent(txfHouseholdRisk2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlHouseholdOccupantsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblHouseholdOccupantRiskLevel3)
                            .addComponent(txfHouseholdRisk3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlHouseholdOccupantsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblHouseholdOccupantRiskLevel4)
                            .addComponent(txfHouseholdRisk4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlHouseholdOccupantsLayout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(lblHouseholdOccupantInfoHeader)
                        .addGap(18, 18, 18)
                        .addComponent(scrlpneTblOccupants, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25)
                .addGroup(pnlHouseholdOccupantsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHouseholdOccupantVaccinated)
                    .addComponent(lblNumOccupants)
                    .addComponent(txfHouseholdInternalOccupantsNumVaccinated, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlHouseholdOccupantsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHouseholdOccupantAvgAge)
                    .addComponent(txfHouseholdOccupantAvgAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHouseholdOccupantYearAge))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        desktoppnlHousehold.add(pnlHouseholdOccupants, "card4");

        pnlHouseholdNewHousehold.setBackground(new java.awt.Color(255, 255, 255));

        lblHouseholdNewAddress.setText("Address");

        lblHouseholdNewLatitude.setText("Latitude");

        lblHouseholdNewLatDegree.setText("°");

        lblHouseholdNewLongDegree.setText("'");

        lblHouseholdNewLatSec.setText("''");

        btnHouseholdNewConfirm.setText("Confirm");
        btnHouseholdNewConfirm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnHouseholdNewConfirmMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnHouseholdNewConfirmMouseEntered(evt);
            }
        });

        btnHouseholdNewCancel.setText("Cancel");

        lblHouseholdNewLat.setText("Longitude");

        lblHouseholdNewLongDeg.setText("°");

        lblHouseholdNewLongMin.setText("'");

        lblHouseholdNewLongSec.setText("''");

        lblHouseholdNewHeader.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblHouseholdNewHeader.setText("Add New Household");

        lblHouseholdPreviewCoordinates.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblHouseholdPreviewCoordinates.setText("--° S --° E");

        btnHouseholdNewPreviewDecCoord.setText("Preview Decimal Coordinates");
        btnHouseholdNewPreviewDecCoord.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnHouseholdNewPreviewDecCoordMouseClicked(evt);
            }
        });

        lblHouseholdNewZip.setText("Zip Code:");

        lblHouseholdNewLatNegSign.setText("-");

        javax.swing.GroupLayout pnlHouseholdNewHouseholdLayout = new javax.swing.GroupLayout(pnlHouseholdNewHousehold);
        pnlHouseholdNewHousehold.setLayout(pnlHouseholdNewHouseholdLayout);
        pnlHouseholdNewHouseholdLayout.setHorizontalGroup(
            pnlHouseholdNewHouseholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHouseholdNewHouseholdLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(pnlHouseholdNewHouseholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlHouseholdNewHouseholdLayout.createSequentialGroup()
                        .addGroup(pnlHouseholdNewHouseholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblHouseholdPreviewCoordinates, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlHouseholdNewHouseholdLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(pnlHouseholdNewHouseholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlHouseholdNewHouseholdLayout.createSequentialGroup()
                                        .addComponent(btnHouseholdNewConfirm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnHouseholdNewCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btnHouseholdNewPreviewDecCoord, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(49, 49, 49))
                    .addGroup(pnlHouseholdNewHouseholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblHouseholdNewHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(pnlHouseholdNewHouseholdLayout.createSequentialGroup()
                            .addGroup(pnlHouseholdNewHouseholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(lblHouseholdNewZip, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                                .addComponent(lblHouseholdNewAddress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblHouseholdNewLat, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(pnlHouseholdNewHouseholdLayout.createSequentialGroup()
                                    .addComponent(lblHouseholdNewLatitude, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGap(18, 18, 18)
                                    .addComponent(lblHouseholdNewLatNegSign)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(pnlHouseholdNewHouseholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(pnlHouseholdNewHouseholdLayout.createSequentialGroup()
                                    .addGroup(pnlHouseholdNewHouseholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlHouseholdNewHouseholdLayout.createSequentialGroup()
                                            .addComponent(spnHouseholdNewLatDegrees, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(lblHouseholdNewLatDegree))
                                        .addGroup(pnlHouseholdNewHouseholdLayout.createSequentialGroup()
                                            .addComponent(spnHouseholdNewLongDegrees, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(lblHouseholdNewLongDeg, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(9, 9, 9)
                                    .addGroup(pnlHouseholdNewHouseholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(spnHouseholdNewLongMinutes)
                                        .addComponent(spnHouseholdNewLatMinutes, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE))
                                    .addGap(4, 4, 4)
                                    .addGroup(pnlHouseholdNewHouseholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(pnlHouseholdNewHouseholdLayout.createSequentialGroup()
                                            .addComponent(lblHouseholdNewLongDegree)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(spnHouseholdNewLatSeconds, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(pnlHouseholdNewHouseholdLayout.createSequentialGroup()
                                            .addComponent(lblHouseholdNewLongMin)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(spnHouseholdNewLongSeconds)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(pnlHouseholdNewHouseholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblHouseholdNewLatSec)
                                        .addComponent(lblHouseholdNewLongSec)))
                                .addComponent(txfHouseholdNewAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                                .addComponent(txfHouseholdNewZipCode)))))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        pnlHouseholdNewHouseholdLayout.setVerticalGroup(
            pnlHouseholdNewHouseholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHouseholdNewHouseholdLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(lblHouseholdNewHeader)
                .addGap(18, 18, 18)
                .addGroup(pnlHouseholdNewHouseholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHouseholdNewAddress)
                    .addComponent(txfHouseholdNewAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(pnlHouseholdNewHouseholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHouseholdNewZip)
                    .addComponent(txfHouseholdNewZipCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlHouseholdNewHouseholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHouseholdNewLatitude)
                    .addComponent(lblHouseholdNewLatDegree)
                    .addComponent(spnHouseholdNewLatDegrees, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHouseholdNewLongDegree)
                    .addComponent(spnHouseholdNewLatMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnHouseholdNewLatSeconds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHouseholdNewLatSec)
                    .addComponent(lblHouseholdNewLatNegSign))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlHouseholdNewHouseholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHouseholdNewLat)
                    .addComponent(spnHouseholdNewLongDegrees, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHouseholdNewLongDeg)
                    .addComponent(spnHouseholdNewLongMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHouseholdNewLongMin)
                    .addComponent(spnHouseholdNewLongSeconds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHouseholdNewLongSec))
                .addGap(18, 18, 18)
                .addComponent(lblHouseholdPreviewCoordinates)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(btnHouseholdNewPreviewDecCoord)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlHouseholdNewHouseholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnHouseholdNewConfirm)
                    .addComponent(btnHouseholdNewCancel))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        desktoppnlHousehold.add(pnlHouseholdNewHousehold, "card3");

        btnHouseholdAbout.setText("About");
        btnHouseholdAbout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnHouseholdAboutMouseClicked(evt);
            }
        });

        btnHouseholdOccupants.setText("Occupants");
        btnHouseholdOccupants.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnHouseholdOccupantsMouseClicked(evt);
            }
        });

        btnHouseholdNewHousehold.setText("Add Household");
        btnHouseholdNewHousehold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnHouseholdNewHouseholdMouseClicked(evt);
            }
        });

        btnFirstLstHousehold.setText("<<");
        btnFirstLstHousehold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnFirstLstHouseholdMouseClicked(evt);
            }
        });

        btnLastLstHousehold.setText(">>");
        btnLastLstHousehold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLastLstHouseholdMouseClicked(evt);
            }
        });

        btnPreviousLstHousehold.setText("<");
        btnPreviousLstHousehold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnPreviousLstHouseholdMouseClicked(evt);
            }
        });

        btnNextLstHousehold.setText(">");
        btnNextLstHousehold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnNextLstHouseholdMouseClicked(evt);
            }
        });

        lblHouseholdPnlHeading.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        lblHouseholdPnlHeading.setForeground(new java.awt.Color(255, 255, 255));
        lblHouseholdPnlHeading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHouseholdPnlHeading.setText("H O U S E H O L D   P O R T A L");
        lblHouseholdPnlHeading.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        javax.swing.GroupLayout pnlHouseholdLayout = new javax.swing.GroupLayout(pnlHousehold);
        pnlHousehold.setLayout(pnlHouseholdLayout);
        pnlHouseholdLayout.setHorizontalGroup(
            pnlHouseholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHouseholdLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(pnlHouseholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlHouseholdLayout.createSequentialGroup()
                        .addComponent(btnFirstLstHousehold, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPreviousLstHousehold, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68)
                        .addComponent(btnNextLstHousehold, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLastLstHousehold, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(scrlpneLstHousehold, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(pnlHouseholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlHouseholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(pnlHouseholdLayout.createSequentialGroup()
                            .addComponent(btnHouseholdAbout, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnHouseholdOccupants, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnHouseholdNewHousehold, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(desktoppnlHousehold, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblHouseholdPnlHeading, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );
        pnlHouseholdLayout.setVerticalGroup(
            pnlHouseholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHouseholdLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(pnlHouseholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(pnlHouseholdLayout.createSequentialGroup()
                        .addComponent(lblHouseholdPnlHeading, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlHouseholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnHouseholdAbout)
                            .addComponent(btnHouseholdOccupants)
                            .addComponent(btnHouseholdNewHousehold))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(desktoppnlHousehold, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlHouseholdLayout.createSequentialGroup()
                        .addComponent(scrlpneLstHousehold)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlHouseholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnFirstLstHousehold)
                            .addComponent(btnPreviousLstHousehold)
                            .addComponent(btnNextLstHousehold)
                            .addComponent(btnLastLstHousehold))))
                .addGap(30, 30, 30))
        );

        desktoppnlContainer.add(pnlHousehold, "card4");

        lblVaccinationLogHeader.setBackground(new java.awt.Color(255, 255, 255));
        lblVaccinationLogHeader.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        lblVaccinationLogHeader.setForeground(new java.awt.Color(255, 255, 255));
        lblVaccinationLogHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblVaccinationLogHeader.setText("V A C C I N A T I O N   L O G ");
        lblVaccinationLogHeader.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        pnlButtonContainer.setBackground(new java.awt.Color(255, 255, 255));

        btnVaccinationLogSelect.setText("Select");
        btnVaccinationLogSelect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnVaccinationLogSelectMouseClicked(evt);
            }
        });

        btnVaccinationLogForward.setText("<");
        btnVaccinationLogForward.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnVaccinationLogForwardMouseClicked(evt);
            }
        });

        btnVaccinationLogBack.setText(">");
        btnVaccinationLogBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnVaccinationLogBackMouseClicked(evt);
            }
        });

        btnVaccinationLogBrand.setText("Brand");
        btnVaccinationLogBrand.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnVaccinationLogBrandMouseClicked(evt);
            }
        });

        btnVaccinationLogCentre.setText("Centre");
        btnVaccinationLogCentre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnVaccinationLogCentreMouseClicked(evt);
            }
        });

        btnVaccinationLogDate.setText("Date");
        btnVaccinationLogDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnVaccinationLogDateMouseClicked(evt);
            }
        });

        btnVaccinationLogCitizen.setText("Citizen");
        btnVaccinationLogCitizen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnVaccinationLogCitizenMouseClicked(evt);
            }
        });

        lblVaccinationSortBy.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblVaccinationSortBy.setText("Sort By");

        javax.swing.GroupLayout pnlButtonContainerLayout = new javax.swing.GroupLayout(pnlButtonContainer);
        pnlButtonContainer.setLayout(pnlButtonContainerLayout);
        pnlButtonContainerLayout.setHorizontalGroup(
            pnlButtonContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlButtonContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnVaccinationLogSelect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlButtonContainerLayout.createSequentialGroup()
                        .addComponent(btnVaccinationLogForward, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnVaccinationLogBack, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                    .addComponent(btnVaccinationLogCentre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnVaccinationLogDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnVaccinationLogCitizen, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                    .addComponent(btnVaccinationLogBrand, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblVaccinationSortBy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sptrVaccinationHeaderfromButton))
                .addContainerGap())
        );
        pnlButtonContainerLayout.setVerticalGroup(
            pnlButtonContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnVaccinationLogSelect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlButtonContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnVaccinationLogForward)
                    .addComponent(btnVaccinationLogBack))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(lblVaccinationSortBy)
                .addGap(5, 5, 5)
                .addComponent(sptrVaccinationHeaderfromButton, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(btnVaccinationLogDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnVaccinationLogCentre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnVaccinationLogCitizen)
                .addGap(8, 8, 8)
                .addComponent(btnVaccinationLogBrand)
                .addContainerGap())
        );

        tblVaccination.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Date", "Centre", "Citizen", "Brand"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblVaccination.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scrlpneTblVaccinationTable.setViewportView(tblVaccination);
        if (tblVaccination.getColumnModel().getColumnCount() > 0) {
            tblVaccination.getColumnModel().getColumn(0).setMinWidth(95);
            tblVaccination.getColumnModel().getColumn(0).setPreferredWidth(95);
            tblVaccination.getColumnModel().getColumn(0).setMaxWidth(95);
            tblVaccination.getColumnModel().getColumn(2).setMinWidth(140);
            tblVaccination.getColumnModel().getColumn(2).setPreferredWidth(140);
            tblVaccination.getColumnModel().getColumn(2).setMaxWidth(140);
            tblVaccination.getColumnModel().getColumn(3).setMinWidth(140);
            tblVaccination.getColumnModel().getColumn(3).setPreferredWidth(140);
            tblVaccination.getColumnModel().getColumn(3).setMaxWidth(140);
        }

        javax.swing.GroupLayout pnlVaccinationLogLayout = new javax.swing.GroupLayout(pnlVaccinationLog);
        pnlVaccinationLog.setLayout(pnlVaccinationLogLayout);
        pnlVaccinationLogLayout.setHorizontalGroup(
            pnlVaccinationLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlVaccinationLogLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(pnlVaccinationLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblVaccinationLogHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scrlpneTblVaccinationTable, javax.swing.GroupLayout.DEFAULT_SIZE, 624, Short.MAX_VALUE))
                .addGap(30, 30, 30)
                .addComponent(pnlButtonContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );
        pnlVaccinationLogLayout.setVerticalGroup(
            pnlVaccinationLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlVaccinationLogLayout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addComponent(lblVaccinationLogHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlVaccinationLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlVaccinationLogLayout.createSequentialGroup()
                        .addComponent(pnlButtonContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(82, 82, 82))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlVaccinationLogLayout.createSequentialGroup()
                        .addComponent(scrlpneTblVaccinationTable, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))))
        );

        desktoppnlContainer.add(pnlVaccinationLog, "card6");

        lblAddingUserCaution.setText("* Note : new user will set their password on their next login");

        btnSendMessage.setText("Send");
        btnSendMessage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSendMessageMouseClicked(evt);
            }
        });

        lblMessageUser.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblMessageUser.setText("Message User");

        cmbMessageUser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item1" }));

        btnUsersMessagesRefresh.setText("Refresh");
        btnUsersMessagesRefresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnUsersMessagesRefreshMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnUsersMessagesRefreshMouseEntered(evt);
            }
        });

        lblYourInbox.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblYourInbox.setText("Your Inbox");

        desktoppnlUser.setLayout(new java.awt.CardLayout());

        pnlAboutUser.setBackground(new java.awt.Color(255, 255, 255));

        lblUserInfoHeader.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblUserInfoHeader.setText("About Me");

        lblUserOwnName.setText("Name");

        lblUserHomeAddress.setText("Home Address");

        lblUserName.setText("Username");

        lblStatus.setText("Status:");

        lblEmail.setText("Email");

        btnAddUser.setText("Add User");
        btnAddUser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddUserMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnlAboutUserLayout = new javax.swing.GroupLayout(pnlAboutUser);
        pnlAboutUser.setLayout(pnlAboutUserLayout);
        pnlAboutUserLayout.setHorizontalGroup(
            pnlAboutUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAboutUserLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(pnlAboutUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblUserInfoHeader)
                    .addComponent(lblUserOwnName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblUserName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblEmail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblUserHomeAddress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAboutUserLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAddUser, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(122, 122, 122))
        );
        pnlAboutUserLayout.setVerticalGroup(
            pnlAboutUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAboutUserLayout.createSequentialGroup()
                .addContainerGap(56, Short.MAX_VALUE)
                .addComponent(lblUserInfoHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblUserOwnName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblUserName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEmail)
                .addGap(18, 18, 18)
                .addComponent(lblUserHomeAddress)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddUser)
                .addGap(44, 44, 44))
        );

        desktoppnlUser.add(pnlAboutUser, "card2");

        pnlAddUser.setBackground(new java.awt.Color(255, 255, 255));

        lblAddUserHeader.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblAddUserHeader.setText("Add New User");

        ckbxHasAdmin.setText("Allow Admin Access?");

        lblAddUserName.setText("Username");

        txfNewUsername.setText("new_username");

        lblAddUserCitizenProfile.setText("Citizen Profile");

        btnAddUserConfirm.setText("Add User");
        btnAddUserConfirm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddUserConfirmMouseClicked(evt);
            }
        });

        lblUserEmail.setText("Email");

        btnAddUserCancel.setText("Cancel");
        btnAddUserCancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddUserCancelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnlAddUserLayout = new javax.swing.GroupLayout(pnlAddUser);
        pnlAddUser.setLayout(pnlAddUserLayout);
        pnlAddUserLayout.setHorizontalGroup(
            pnlAddUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAddUserLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(pnlAddUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAddUserLayout.createSequentialGroup()
                        .addGroup(pnlAddUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAddUserCitizenProfile, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                            .addComponent(lblAddUserName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlAddUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txfNewUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbNewUserCitizens, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30))
                    .addGroup(pnlAddUserLayout.createSequentialGroup()
                        .addGroup(pnlAddUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAddUserHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlAddUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(ckbxHasAdmin)
                                .addGroup(pnlAddUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(pnlAddUserLayout.createSequentialGroup()
                                        .addComponent(lblUserEmail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txfNewEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(sptrAddUser, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAddUserLayout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(btnAddUserConfirm)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddUserCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlAddUserLayout.setVerticalGroup(
            pnlAddUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAddUserLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(lblAddUserHeader)
                .addGap(18, 18, 18)
                .addGroup(pnlAddUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbNewUserCitizens, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAddUserCitizenProfile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlAddUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txfNewUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAddUserName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ckbxHasAdmin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlAddUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUserEmail)
                    .addComponent(txfNewEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(sptrAddUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlAddUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddUserConfirm)
                    .addComponent(btnAddUserCancel))
                .addGap(30, 30, 30))
        );

        desktoppnlUser.add(pnlAddUser, "card3");

        txaUserInfoLog.setColumns(20);
        txaUserInfoLog.setRows(5);
        scrlpneUserMessages.setViewportView(txaUserInfoLog);

        lblMessagingPortalHeader.setBackground(new java.awt.Color(255, 255, 255));
        lblMessagingPortalHeader.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        lblMessagingPortalHeader.setForeground(new java.awt.Color(255, 255, 255));
        lblMessagingPortalHeader.setText("M E S S A G I N G  P O R T A L");

        btnChangeUsername.setText("Change Password");
        btnChangeUsername.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnChangeUsernameMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnlUserManagementLayout = new javax.swing.GroupLayout(pnlUserManagement);
        pnlUserManagement.setLayout(pnlUserManagementLayout);
        pnlUserManagementLayout.setHorizontalGroup(
            pnlUserManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlUserManagementLayout.createSequentialGroup()
                .addGroup(pnlUserManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlUserManagementLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(pnlUserManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblAddingUserCaution, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(desktoppnlUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE))
                    .addGroup(pnlUserManagementLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnChangeUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(pnlUserManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlUserManagementLayout.createSequentialGroup()
                        .addComponent(lblMessageUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(268, 268, 268))
                    .addGroup(pnlUserManagementLayout.createSequentialGroup()
                        .addGroup(pnlUserManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(scrlpneUserMessages, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlUserManagementLayout.createSequentialGroup()
                                .addComponent(lblYourInbox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUsersMessagesRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txfUserMessage, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnSendMessage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbMessageUser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMessagingPortalHeader, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sptrMessagesfromSend, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(30, 30, 30))))
        );
        pnlUserManagementLayout.setVerticalGroup(
            pnlUserManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlUserManagementLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(pnlUserManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlUserManagementLayout.createSequentialGroup()
                        .addComponent(desktoppnlUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblAddingUserCaution, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(btnChangeUsername))
                    .addGroup(pnlUserManagementLayout.createSequentialGroup()
                        .addComponent(lblMessagingPortalHeader)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 14, Short.MAX_VALUE)
                        .addGroup(pnlUserManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbMessageUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMessageUser))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txfUserMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSendMessage)
                        .addGap(9, 9, 9)
                        .addComponent(sptrMessagesfromSend, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(pnlUserManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnUsersMessagesRefresh)
                            .addComponent(lblYourInbox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrlpneUserMessages, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30))
        );

        desktoppnlContainer.add(pnlUserManagement, "card11");

        pnlCitizen.setBackground(new java.awt.Color(204, 204, 204));

        scrlpneLstCitizen.setMaximumSize(new java.awt.Dimension(280, 395));
        scrlpneLstCitizen.setPreferredSize(new java.awt.Dimension(280, 395));

        lstCitizen.setMaximumSize(new java.awt.Dimension(280, 395));
        lstCitizen.setMinimumSize(new java.awt.Dimension(280, 395));
        lstCitizen.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstCitizenValueChanged(evt);
            }
        });
        scrlpneLstCitizen.setViewportView(lstCitizen);

        desktoppnlCitizen.setLayout(new java.awt.CardLayout());

        pnlCitizenAbout.setBackground(new java.awt.Color(255, 255, 255));

        lblCitizenFirstName.setText("First Name");

        txfCitizenInternalFirstName.setText("  ");

        lblCitizenGeneralInfo.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblCitizenGeneralInfo.setText("General Information");

        btnUpdateCitizen.setText("Update");
        btnUpdateCitizen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnUpdateCitizenMouseClicked(evt);
            }
        });

        txfCitizenInternalVaccinationStatus.setText(" ");

        txfCitizenInternalContactNumber.setText(" ");

        lblCitizenAge.setText("Age");

        lblCitizenSex.setText("Sex");

        lblCitizenCitizenship.setText("Citizenship");

        lblCitizenStatus.setText("Status");

        lblCitizenRiskLevel.setText("Risk Level");

        lblCitizenContactNumber.setText("Contact Number");

        lblCitizenYearsOld.setText("years old");

        lblInternalAge.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblInternalAge.setText("        ");

        lblCitizenInternalSex.setText("   ");

        lblCitizenInternalSACitizen.setText("  ");

        lblCitizenInternalRiskLevel.setText("  ");

        txfCitizenInternalLastName.setText("   ");

        lblCitizenLastName.setText("Last Name");

        javax.swing.GroupLayout pnlCitizenAboutLayout = new javax.swing.GroupLayout(pnlCitizenAbout);
        pnlCitizenAbout.setLayout(pnlCitizenAboutLayout);
        pnlCitizenAboutLayout.setHorizontalGroup(
            pnlCitizenAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCitizenAboutLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(pnlCitizenAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlCitizenAboutLayout.createSequentialGroup()
                        .addGroup(pnlCitizenAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblCitizenAge, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCitizenSex, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCitizenCitizenship, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCitizenStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCitizenRiskLevel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCitizenContactNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCitizenAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlCitizenAboutLayout.createSequentialGroup()
                                .addComponent(lblInternalAge, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblCitizenYearsOld, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 36, Short.MAX_VALUE))
                            .addComponent(lblCitizenInternalSex, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCitizenInternalSACitizen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txfCitizenInternalVaccinationStatus)
                            .addComponent(lblCitizenInternalRiskLevel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txfCitizenInternalContactNumber)))
                    .addGroup(pnlCitizenAboutLayout.createSequentialGroup()
                        .addGroup(pnlCitizenAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnlCitizenAboutLayout.createSequentialGroup()
                                .addGroup(pnlCitizenAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblCitizenFirstName, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                    .addComponent(lblCitizenGeneralInfo))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(pnlCitizenAboutLayout.createSequentialGroup()
                                .addComponent(lblCitizenLastName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(6, 6, 6)))
                        .addGroup(pnlCitizenAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txfCitizenInternalLastName)
                            .addComponent(txfCitizenInternalFirstName))))
                .addGap(50, 50, 50))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCitizenAboutLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnUpdateCitizen, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(163, 163, 163))
        );
        pnlCitizenAboutLayout.setVerticalGroup(
            pnlCitizenAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCitizenAboutLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(lblCitizenGeneralInfo)
                .addGap(11, 11, 11)
                .addGroup(pnlCitizenAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCitizenFirstName)
                    .addComponent(txfCitizenInternalFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCitizenAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txfCitizenInternalLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCitizenLastName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCitizenAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCitizenAge)
                    .addComponent(lblCitizenYearsOld)
                    .addComponent(lblInternalAge, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCitizenAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCitizenSex)
                    .addComponent(lblCitizenInternalSex, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCitizenAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCitizenInternalSACitizen, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCitizenCitizenship))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCitizenAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txfCitizenInternalVaccinationStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCitizenStatus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCitizenAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCitizenInternalRiskLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCitizenRiskLevel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlCitizenAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txfCitizenInternalContactNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCitizenContactNumber))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpdateCitizen)
                .addGap(25, 25, 25))
        );

        desktoppnlCitizen.add(pnlCitizenAbout, "card2");

        pnlCitizenAddCitizen.setBackground(new java.awt.Color(255, 255, 255));

        lblNewCitizenLastName.setText("Enter Last Name");

        lblNewCitizenIDNumber.setText("Enter SA ID/Passport Number");

        lblNewCitizenContactNumber.setText("Enter a Contact Number");

        sdrRiskLevel.setMajorTickSpacing(1);
        sdrRiskLevel.setMaximum(4);
        sdrRiskLevel.setMinimum(1);
        sdrRiskLevel.setPaintLabels(true);
        sdrRiskLevel.setPaintTicks(true);

        lblNewCitizenRiskLevel.setText("What risk level are they?");

        lblNewCitizenAddress.setText("Where do they live?");

        lblNewCitizenHeader.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        lblNewCitizenHeader.setText("New Citizen ");

        btnCitizenNewCitizenCancel.setText("Cancel");
        btnCitizenNewCitizenCancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCitizenNewCitizenCancelMouseClicked(evt);
            }
        });

        btnCitizenNewCitizenConfirm.setText("Confirm");
        btnCitizenNewCitizenConfirm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCitizenNewCitizenConfirmMouseClicked(evt);
            }
        });

        btnCitizenNewHelp.setText("?");

        lblNewCitizenFirstName.setText("Enter First Name");

        javax.swing.GroupLayout pnlCitizenAddCitizenLayout = new javax.swing.GroupLayout(pnlCitizenAddCitizen);
        pnlCitizenAddCitizen.setLayout(pnlCitizenAddCitizenLayout);
        pnlCitizenAddCitizenLayout.setHorizontalGroup(
            pnlCitizenAddCitizenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCitizenAddCitizenLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(pnlCitizenAddCitizenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCitizenAddCitizenLayout.createSequentialGroup()
                        .addGroup(pnlCitizenAddCitizenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlCitizenAddCitizenLayout.createSequentialGroup()
                                .addGap(90, 90, 90)
                                .addComponent(btnCitizenNewCitizenConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnCitizenNewCitizenCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlCitizenAddCitizenLayout.createSequentialGroup()
                                .addGroup(pnlCitizenAddCitizenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblNewCitizenIDNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblNewCitizenContactNumber)
                                    .addComponent(lblNewCitizenRiskLevel)
                                    .addComponent(lblNewCitizenLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblNewCitizenAddress)
                                    .addComponent(sdrRiskLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblNewCitizenFirstName))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlCitizenAddCitizenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmbHouseholdArr, 0, 211, Short.MAX_VALUE)
                                    .addComponent(txfCitizenNewContactNumber)
                                    .addComponent(txfCitizenNewPersonalId)
                                    .addComponent(txfCitizenNewLastName)
                                    .addComponent(txfCitizenNewFirstName))))
                        .addGap(18, 18, 18))
                    .addGroup(pnlCitizenAddCitizenLayout.createSequentialGroup()
                        .addComponent(lblNewCitizenHeader)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCitizenNewHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        pnlCitizenAddCitizenLayout.setVerticalGroup(
            pnlCitizenAddCitizenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCitizenAddCitizenLayout.createSequentialGroup()
                .addGroup(pnlCitizenAddCitizenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCitizenAddCitizenLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnCitizenNewHelp))
                    .addGroup(pnlCitizenAddCitizenLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(lblNewCitizenHeader)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCitizenAddCitizenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txfCitizenNewFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNewCitizenFirstName))
                .addGap(3, 3, 3)
                .addGroup(pnlCitizenAddCitizenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNewCitizenLastName)
                    .addComponent(txfCitizenNewLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlCitizenAddCitizenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNewCitizenIDNumber)
                    .addComponent(txfCitizenNewPersonalId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCitizenAddCitizenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNewCitizenContactNumber)
                    .addComponent(txfCitizenNewContactNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblNewCitizenRiskLevel)
                .addGap(12, 12, 12)
                .addComponent(sdrRiskLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCitizenAddCitizenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNewCitizenAddress)
                    .addComponent(cmbHouseholdArr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCitizenAddCitizenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCitizenNewCitizenConfirm)
                    .addComponent(btnCitizenNewCitizenCancel))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        desktoppnlCitizen.add(pnlCitizenAddCitizen, "card4");

        pnlCitizenHousehold.setBackground(new java.awt.Color(255, 255, 255));

        btnCitizenMoveConfirm.setText("Confirm");
        btnCitizenMoveConfirm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCitizenMoveConfirmMouseClicked(evt);
            }
        });

        lblCitizenHouseholdAddressHeader.setText("Home Address");

        lblCitizenHomeAddress.setText("jLabel111");

        lblCitizenHouseholdCentreHeader.setText("Closest Centre:");

        lblCitizenClosestCentre.setText("jLabel113");

        lblCitizenHouseholdMove.setText("Move to");

        cmbCitizenHouseholdMove.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbCitizenHouseholdMove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmbCitizenHouseholdMoveMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnlCitizenHouseholdLayout = new javax.swing.GroupLayout(pnlCitizenHousehold);
        pnlCitizenHousehold.setLayout(pnlCitizenHouseholdLayout);
        pnlCitizenHouseholdLayout.setHorizontalGroup(
            pnlCitizenHouseholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCitizenHouseholdLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(pnlCitizenHouseholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCitizenHouseholdLayout.createSequentialGroup()
                        .addComponent(lblCitizenHouseholdMove, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(cmbCitizenHouseholdMove, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnCitizenMoveConfirm, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblCitizenClosestCentre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblCitizenHouseholdAddressHeader)
                    .addComponent(lblCitizenHomeAddress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblCitizenHouseholdCentreHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sptrCitizenHouseholdMove))
                .addGap(50, 50, 50))
        );
        pnlCitizenHouseholdLayout.setVerticalGroup(
            pnlCitizenHouseholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCitizenHouseholdLayout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(lblCitizenHouseholdAddressHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblCitizenHomeAddress)
                .addGap(45, 45, 45)
                .addComponent(lblCitizenHouseholdCentreHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblCitizenClosestCentre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sptrCitizenHouseholdMove, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlCitizenHouseholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCitizenHouseholdMove)
                    .addComponent(cmbCitizenHouseholdMove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(btnCitizenMoveConfirm)
                .addGap(50, 50, 50))
        );

        desktoppnlCitizen.add(pnlCitizenHousehold, "card3");

        btnCitizenInfo.setText("Info");
        btnCitizenInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCitizenInfoMouseClicked(evt);
            }
        });

        btnCitizenAddCitizen.setText("Add Citizen");
        btnCitizenAddCitizen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCitizenAddCitizenMouseClicked(evt);
            }
        });

        btnCitizenHousehold.setText("Household");
        btnCitizenHousehold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCitizenHouseholdMouseClicked(evt);
            }
        });
        btnCitizenHousehold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCitizenHouseholdActionPerformed(evt);
            }
        });

        lblCitizenHeader.setBackground(new java.awt.Color(255, 255, 255));
        lblCitizenHeader.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        lblCitizenHeader.setForeground(new java.awt.Color(255, 255, 255));
        lblCitizenHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCitizenHeader.setText("C I T I Z E N   P O R T A L");
        lblCitizenHeader.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        btnFirstLstCitizen.setText("<<");
        btnFirstLstCitizen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnFirstLstCitizenMouseClicked(evt);
            }
        });

        btnLastLstCitizen.setText(">>");
        btnLastLstCitizen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLastLstCitizenMouseClicked(evt);
            }
        });

        btnPreviousLstCitizen.setText("<");
        btnPreviousLstCitizen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnPreviousLstCitizenMouseClicked(evt);
            }
        });

        btnNextLstCitizen.setText(">");
        btnNextLstCitizen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnNextLstCitizenMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnlCitizenLayout = new javax.swing.GroupLayout(pnlCitizen);
        pnlCitizen.setLayout(pnlCitizenLayout);
        pnlCitizenLayout.setHorizontalGroup(
            pnlCitizenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCitizenLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(pnlCitizenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlCitizenLayout.createSequentialGroup()
                        .addComponent(btnFirstLstCitizen, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPreviousLstCitizen, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68)
                        .addComponent(btnNextLstCitizen, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLastLstCitizen, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(scrlpneLstCitizen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30)
                .addGroup(pnlCitizenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(desktoppnlCitizen, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
                    .addGroup(pnlCitizenLayout.createSequentialGroup()
                        .addComponent(btnCitizenInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCitizenHousehold, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCitizenAddCitizen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(lblCitizenHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30))
        );
        pnlCitizenLayout.setVerticalGroup(
            pnlCitizenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCitizenLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(pnlCitizenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlCitizenLayout.createSequentialGroup()
                        .addComponent(lblCitizenHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCitizenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnCitizenAddCitizen)
                            .addGroup(pnlCitizenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnCitizenHousehold)
                                .addComponent(btnCitizenInfo)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(desktoppnlCitizen, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCitizenLayout.createSequentialGroup()
                        .addComponent(scrlpneLstCitizen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCitizenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnFirstLstCitizen)
                            .addComponent(btnLastLstCitizen)
                            .addComponent(btnPreviousLstCitizen)
                            .addComponent(btnNextLstCitizen))))
                .addGap(30, 30, 30))
        );

        desktoppnlContainer.add(pnlCitizen, "card3");

        pnlCentre.setBackground(new java.awt.Color(204, 204, 204));

        lstCentre.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstCentre.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstCentreValueChanged(evt);
            }
        });
        scrlpneLstCentre.setViewportView(lstCentre);

        desktoppnlCentre.setLayout(new java.awt.CardLayout());

        pnlCentreInternalRecentVaccination.setBackground(new java.awt.Color(255, 255, 255));

        txaRecentVaccinations.setColumns(20);
        txaRecentVaccinations.setRows(5);
        scrlpneRecentVaccination.setViewportView(txaRecentVaccinations);

        lblRecentVaccinationHeader.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblRecentVaccinationHeader.setText("Recent Vaccinations:");

        pnlCentreDeliver.setBackground(new java.awt.Color(204, 204, 204));

        lblCentreDeliverHeader.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblCentreDeliverHeader.setText("Request Doses");

        lblCentreBrandDeliver.setText("Brand");

        lblCentreDoses.setText("Doses");

        btnCentreDosesDeliver.setText("Deliver");
        btnCentreDosesDeliver.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCentreDosesDeliverMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnlCentreDeliverLayout = new javax.swing.GroupLayout(pnlCentreDeliver);
        pnlCentreDeliver.setLayout(pnlCentreDeliverLayout);
        pnlCentreDeliverLayout.setHorizontalGroup(
            pnlCentreDeliverLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCentreDeliverLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(pnlCentreDeliverLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCentreDeliverLayout.createSequentialGroup()
                        .addComponent(lblCentreDoses, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(62, 62, 62))
                    .addGroup(pnlCentreDeliverLayout.createSequentialGroup()
                        .addGroup(pnlCentreDeliverLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblCentreBrandDeliver, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCentreDeliverHeader, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)))
                .addGroup(pnlCentreDeliverLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(spnCentreAcquistionsDoses, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbAcquisitionBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCentreDosesDeliver, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34))
        );
        pnlCentreDeliverLayout.setVerticalGroup(
            pnlCentreDeliverLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCentreDeliverLayout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(pnlCentreDeliverLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCentreDeliverHeader)
                    .addComponent(btnCentreDosesDeliver))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCentreDeliverLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbAcquisitionBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCentreBrandDeliver, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCentreDeliverLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnCentreAcquistionsDoses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCentreDoses))
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout pnlCentreInternalRecentVaccinationLayout = new javax.swing.GroupLayout(pnlCentreInternalRecentVaccination);
        pnlCentreInternalRecentVaccination.setLayout(pnlCentreInternalRecentVaccinationLayout);
        pnlCentreInternalRecentVaccinationLayout.setHorizontalGroup(
            pnlCentreInternalRecentVaccinationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCentreInternalRecentVaccinationLayout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addGroup(pnlCentreInternalRecentVaccinationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblRecentVaccinationHeader)
                    .addComponent(scrlpneRecentVaccination)
                    .addComponent(pnlCentreDeliver, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30))
        );
        pnlCentreInternalRecentVaccinationLayout.setVerticalGroup(
            pnlCentreInternalRecentVaccinationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCentreInternalRecentVaccinationLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(lblRecentVaccinationHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrlpneRecentVaccination, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(pnlCentreDeliver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        desktoppnlCentre.add(pnlCentreInternalRecentVaccination, "card3");

        pnlCentreInternalNewCentre.setBackground(new java.awt.Color(255, 255, 255));

        lblNewCentre.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblNewCentre.setText("New Centre");

        lblNewCentreAddress.setText("Address");

        lblNewCentreName.setText("Name");

        lblNewCentreLatitude.setText("Latitude");

        lblCentreNewLatDegree.setText("°");

        lblCentreNewLongitude.setText("Longitude");

        lblCentreNewLongDegree.setText("°");

        lblCentreNewLatMin.setText("'");

        lblCentreNewLongMin.setText("'");

        lblCentreNewLatSec.setText("''");

        lblCentreNewLongSec.setText("''");

        btnCentreNewConfirm.setText("Confirm");
        btnCentreNewConfirm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCentreNewConfirmMouseClicked(evt);
            }
        });

        btnNewCentreCancel.setText("Cancel");
        btnNewCentreCancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnNewCentreCancelMouseClicked(evt);
            }
        });

        lblNewCentreZipCode.setText("Zip Code");

        lblMinusSign.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMinusSign.setText("-");

        javax.swing.GroupLayout pnlCentreInternalNewCentreLayout = new javax.swing.GroupLayout(pnlCentreInternalNewCentre);
        pnlCentreInternalNewCentre.setLayout(pnlCentreInternalNewCentreLayout);
        pnlCentreInternalNewCentreLayout.setHorizontalGroup(
            pnlCentreInternalNewCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCentreInternalNewCentreLayout.createSequentialGroup()
                .addContainerGap(52, Short.MAX_VALUE)
                .addGroup(pnlCentreInternalNewCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlCentreInternalNewCentreLayout.createSequentialGroup()
                        .addGroup(pnlCentreInternalNewCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlCentreInternalNewCentreLayout.createSequentialGroup()
                                .addComponent(btnCentreNewConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnNewCentreCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlCentreInternalNewCentreLayout.createSequentialGroup()
                                .addGroup(pnlCentreInternalNewCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(pnlCentreInternalNewCentreLayout.createSequentialGroup()
                                        .addComponent(lblNewCentreLatitude, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(26, 26, 26)
                                        .addComponent(lblMinusSign, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lblCentreNewLongitude, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlCentreInternalNewCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(spn4, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(spn1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlCentreInternalNewCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblCentreNewLatDegree, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblCentreNewLongDegree))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlCentreInternalNewCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(spn2)
                                    .addComponent(spn5, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCentreInternalNewCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnlCentreInternalNewCentreLayout.createSequentialGroup()
                                .addComponent(lblCentreNewLongMin)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spn6))
                            .addGroup(pnlCentreInternalNewCentreLayout.createSequentialGroup()
                                .addComponent(lblCentreNewLatMin)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spn3, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCentreInternalNewCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblCentreNewLatSec, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCentreNewLongSec)))
                    .addGroup(pnlCentreInternalNewCentreLayout.createSequentialGroup()
                        .addGroup(pnlCentreInternalNewCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlCentreInternalNewCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lblNewCentreName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblNewCentre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblNewCentreAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblNewCentreZipCode))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCentreInternalNewCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txfCentreNewZipCode, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                            .addComponent(txfCentreNewName)
                            .addComponent(txfCentreNewAddress))))
                .addGap(48, 48, 48))
        );
        pnlCentreInternalNewCentreLayout.setVerticalGroup(
            pnlCentreInternalNewCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCentreInternalNewCentreLayout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(lblNewCentre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlCentreInternalNewCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txfCentreNewName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNewCentreName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCentreInternalNewCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNewCentreAddress)
                    .addComponent(txfCentreNewAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCentreInternalNewCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txfCentreNewZipCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNewCentreZipCode))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCentreInternalNewCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNewCentreLatitude)
                    .addComponent(spn1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCentreNewLatDegree)
                    .addComponent(spn2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCentreNewLatMin)
                    .addComponent(spn3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCentreNewLatSec)
                    .addComponent(lblMinusSign))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCentreInternalNewCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCentreNewLongitude)
                    .addComponent(spn4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCentreNewLongDegree)
                    .addComponent(spn5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCentreNewLongMin)
                    .addComponent(spn6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCentreNewLongSec))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlCentreInternalNewCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnNewCentreCancel)
                    .addComponent(btnCentreNewConfirm))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        desktoppnlCentre.add(pnlCentreInternalNewCentre, "card4");

        pnlCentreInternalAbout.setBackground(new java.awt.Color(255, 255, 255));

        lblCentreName.setText("Name");

        lblCentreAddress.setText("Address");

        lblCentreNumVaccines.setText("Number of Vaccines");

        lblCentreGenInfo.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblCentreGenInfo.setText("General Information");

        txfCentreZipCode.setText(" ");

        btnCentreUpdate.setText("Update");
        btnCentreUpdate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCentreUpdateMouseClicked(evt);
            }
        });

        btnDeleteCentre.setText("Delete");

        lblCentreCoordina.setText("Coordinates");

        javax.swing.GroupLayout pnlCentreInternalAboutLayout = new javax.swing.GroupLayout(pnlCentreInternalAbout);
        pnlCentreInternalAbout.setLayout(pnlCentreInternalAboutLayout);
        pnlCentreInternalAboutLayout.setHorizontalGroup(
            pnlCentreInternalAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCentreInternalAboutLayout.createSequentialGroup()
                .addGap(103, 103, 103)
                .addComponent(btnCentreUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDeleteCentre, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnlCentreInternalAboutLayout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(pnlCentreInternalAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCentreInternalAboutLayout.createSequentialGroup()
                        .addComponent(lblCentreGenInfo)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCentreInternalAboutLayout.createSequentialGroup()
                        .addGroup(pnlCentreInternalAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlCentreInternalAboutLayout.createSequentialGroup()
                                .addComponent(lblCentreCoordina, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblCentreCoordinates, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlCentreInternalAboutLayout.createSequentialGroup()
                                .addGroup(pnlCentreInternalAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblCentreAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblCentreName, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlCentreInternalAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txfCentreAddress, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txfCentreName, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlCentreInternalAboutLayout.createSequentialGroup()
                                .addComponent(lblCentreNumVaccines, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlCentreInternalAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txfCentreZipCode)
                                    .addComponent(lblCentreNumVaccine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(49, 49, 49))))
        );
        pnlCentreInternalAboutLayout.setVerticalGroup(
            pnlCentreInternalAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCentreInternalAboutLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(lblCentreGenInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlCentreInternalAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txfCentreName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCentreName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCentreInternalAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txfCentreAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCentreAddress))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txfCentreZipCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(pnlCentreInternalAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCentreNumVaccines)
                    .addComponent(lblCentreNumVaccine, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlCentreInternalAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCentreCoordina)
                    .addComponent(lblCentreCoordinates, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(pnlCentreInternalAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCentreUpdate)
                    .addComponent(btnDeleteCentre))
                .addGap(55, 55, 55))
        );

        desktoppnlCentre.add(pnlCentreInternalAbout, "card2");

        btnCentreInternalMoreInfo.setText("More Info");
        btnCentreInternalMoreInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCentreInternalMoreInfoMouseClicked(evt);
            }
        });

        btnCentreInternalVaccination.setText("Vaccinations");
        btnCentreInternalVaccination.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCentreInternalVaccinationMouseClicked(evt);
            }
        });
        btnCentreInternalVaccination.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCentreInternalVaccinationActionPerformed(evt);
            }
        });

        btnCentreInternalNewCentre.setText("New Centre");
        btnCentreInternalNewCentre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCentreInternalNewCentreMouseClicked(evt);
            }
        });

        btnLstCentreFirst.setText("<<");
        btnLstCentreFirst.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLstCentreFirstMouseClicked(evt);
            }
        });

        btnLstCentrePrev.setText("<");
        btnLstCentrePrev.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLstCentrePrevMouseClicked(evt);
            }
        });

        btnLstCentreLast.setText(">>");
        btnLstCentreLast.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLstCentreLastMouseClicked(evt);
            }
        });

        btnLstCentreNext.setText(">");
        btnLstCentreNext.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLstCentreNextMouseClicked(evt);
            }
        });

        lblCentreHeader.setBackground(new java.awt.Color(255, 255, 255));
        lblCentreHeader.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        lblCentreHeader.setForeground(new java.awt.Color(255, 255, 255));
        lblCentreHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCentreHeader.setText("C E N T R E   P O R T A L");
        lblCentreHeader.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        javax.swing.GroupLayout pnlCentreLayout = new javax.swing.GroupLayout(pnlCentre);
        pnlCentre.setLayout(pnlCentreLayout);
        pnlCentreLayout.setHorizontalGroup(
            pnlCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCentreLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(pnlCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCentreLayout.createSequentialGroup()
                        .addComponent(btnLstCentreFirst, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLstCentrePrev, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68)
                        .addComponent(btnLstCentreNext, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLstCentreLast, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(scrlpneLstCentre, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(pnlCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlCentreLayout.createSequentialGroup()
                        .addComponent(btnCentreInternalVaccination, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCentreInternalMoreInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCentreInternalNewCentre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(desktoppnlCentre)
                    .addComponent(lblCentreHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30))
        );
        pnlCentreLayout.setVerticalGroup(
            pnlCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCentreLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(pnlCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlCentreLayout.createSequentialGroup()
                        .addComponent(lblCentreHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCentreInternalNewCentre)
                            .addComponent(btnCentreInternalVaccination)
                            .addComponent(btnCentreInternalMoreInfo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(desktoppnlCentre, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlCentreLayout.createSequentialGroup()
                        .addComponent(scrlpneLstCentre, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnLstCentreFirst)
                            .addComponent(btnLstCentrePrev)
                            .addComponent(btnLstCentreLast)
                            .addComponent(btnLstCentreNext))))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        desktoppnlContainer.add(pnlCentre, "card5");

        pnlHome.setBackground(new java.awt.Color(255, 255, 255));

        btnOpenGuide.setText("Open User Manual");
        btnOpenGuide.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOpenGuideMouseClicked(evt);
            }
        });

        lblOpenUserGuide.setText("For further information, please consult the user manual");

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel1.setText("Frequently Asked Questions");

        jLabel2.setText("Q: Where can I add a new Brand?");

        jLabel3.setText("A: In the Progress screen (accessible by clicking on the Our Progress button)");

        jLabel4.setText("Q: Who can I contact if I have issues?");

        jLabel5.setText("A: You can contact the administrator at thandi.matrose@gmail.com");

        jLabel6.setText("Q: How long does it take for a new vaccination to reflect on the system?");

        jLabel7.setText("A: The information will reflect immediately!");

        jLabel8.setText("Q: Am I able to send messages to myself?");

        jLabel9.setText("A: Of course! Try it out and see for yourself :) (remember to refresh)");

        jLabel10.setText("Q: Other than through the application, how can I contact other users?");

        jLabel11.setText("A: You can privately request a users email or contact number");

        javax.swing.GroupLayout pnlHomeLayout = new javax.swing.GroupLayout(pnlHome);
        pnlHome.setLayout(pnlHomeLayout);
        pnlHomeLayout.setHorizontalGroup(
            pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlHomeLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(236, 236, 236))
            .addGroup(pnlHomeLayout.createSequentialGroup()
                .addGap(111, 111, 111)
                .addComponent(lblOpenUserGuide, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnOpenGuide)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlHomeLayout.createSequentialGroup()
                .addContainerGap(89, Short.MAX_VALUE)
                .addGroup(pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(86, 86, 86))
        );
        pnlHomeLayout.setVerticalGroup(
            pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlHomeLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addGap(27, 27, 27)
                .addGroup(pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOpenGuide)
                    .addComponent(lblOpenUserGuide))
                .addGap(31, 31, 31))
        );

        javax.swing.GroupLayout pnlHelpLayout = new javax.swing.GroupLayout(pnlHelp);
        pnlHelp.setLayout(pnlHelpLayout);
        pnlHelpLayout.setHorizontalGroup(
            pnlHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHelpLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(pnlHome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );
        pnlHelpLayout.setVerticalGroup(
            pnlHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHelpLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(pnlHome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        desktoppnlContainer.add(pnlHelp, "card7");

        tblAboutVaccinations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Zip Code", "Risk Level 1", "Risk Level 2", "Risk Level 3", "Risk Level 4"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        scrlpneTblZipVaccination.setViewportView(tblAboutVaccinations);
        if (tblAboutVaccinations.getColumnModel().getColumnCount() > 0) {
            tblAboutVaccinations.getColumnModel().getColumn(1).setResizable(false);
        }

        pnlCapeTownInfo.setBackground(new java.awt.Color(255, 255, 255));

        lblRegCitizens.setText("Registered Citizens:");

        lblVaccAdministered.setText("Vaccinations Administered:");

        lblVaccCentre.setText("Vaccination Centres:");

        lblInfoVaccineCentres.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblInfoVaccineCentres.setText("jLabel84");

        lblInfoVaccinesAdministered.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblInfoVaccinesAdministered.setText("jLabel85");

        lblRegisteredCitizens.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblRegisteredCitizens.setText("jLabel86");

        txaCapeTownInfo.setColumns(5);
        txaCapeTownInfo.setRows(5);
        txaCapeTownInfo.setText("Colloquially named the Mother City, \nCape Town is the second-most \npopulous city in South Africa. It is also \nthe legislative capital of South Africa.\nPopulation: 433 688");
        scrlpneCapeTownInfo.setViewportView(txaCapeTownInfo);

        lblCapeTownNameHeader.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        lblCapeTownNameHeader.setText("Cape Town");

        lblCapeTownNameTranslate.setFont(new java.awt.Font("Lucida Grande", 2, 13)); // NOI18N
        lblCapeTownNameTranslate.setText("iKapa / Kaapstad");

        javax.swing.GroupLayout pnlCapeTownInfoLayout = new javax.swing.GroupLayout(pnlCapeTownInfo);
        pnlCapeTownInfo.setLayout(pnlCapeTownInfoLayout);
        pnlCapeTownInfoLayout.setHorizontalGroup(
            pnlCapeTownInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCapeTownInfoLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(pnlCapeTownInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlCapeTownInfoLayout.createSequentialGroup()
                        .addGroup(pnlCapeTownInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblVaccAdministered, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblVaccCentre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblRegCitizens, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(8, 8, 8)
                        .addGroup(pnlCapeTownInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblInfoVaccineCentres, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                            .addComponent(lblInfoVaccinesAdministered, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblRegisteredCitizens, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(lblCapeTownNameHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scrlpneCapeTownInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                    .addComponent(lblCapeTownNameTranslate, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCapeTownImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );
        pnlCapeTownInfoLayout.setVerticalGroup(
            pnlCapeTownInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCapeTownInfoLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lblCapeTownImage, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblCapeTownNameHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblCapeTownNameTranslate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrlpneCapeTownInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCapeTownInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblVaccCentre)
                    .addComponent(lblInfoVaccineCentres))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCapeTownInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblVaccAdministered, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblInfoVaccinesAdministered))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCapeTownInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRegCitizens)
                    .addComponent(lblRegisteredCitizens))
                .addGap(23, 23, 23))
        );

        pnlBrandInfo.setBackground(new java.awt.Color(255, 255, 255));

        txaBrandInfo.setColumns(20);
        txaBrandInfo.setRows(3);
        txaBrandInfo.setText("Tha\ngvsijcnk\nlhjbcl'kamc");
        scrlpneBrandInfo.setViewportView(txaBrandInfo);

        btnInfoBrandForward.setText(">");
        btnInfoBrandForward.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnInfoBrandForwardMouseClicked(evt);
            }
        });

        btnInfoBrandBackward.setText("<");
        btnInfoBrandBackward.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnInfoBrandBackwardMouseClicked(evt);
            }
        });

        lblVaccineBrandHeader.setBackground(new java.awt.Color(255, 255, 255));
        lblVaccineBrandHeader.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        lblVaccineBrandHeader.setForeground(new java.awt.Color(140, 184, 184));
        lblVaccineBrandHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblVaccineBrandHeader.setText("V A C C I N E   B R A N D S");

        btnAddBrand.setText("Add Brand");
        btnAddBrand.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddBrandMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnlBrandInfoLayout = new javax.swing.GroupLayout(pnlBrandInfo);
        pnlBrandInfo.setLayout(pnlBrandInfoLayout);
        pnlBrandInfoLayout.setHorizontalGroup(
            pnlBrandInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBrandInfoLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(pnlBrandInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnAddBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlBrandInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lblVaccineBrandHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBrandInfoLayout.createSequentialGroup()
                            .addComponent(scrlpneBrandInfo)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(pnlBrandInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(btnInfoBrandForward, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnInfoBrandBackward, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlBrandInfoLayout.setVerticalGroup(
            pnlBrandInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBrandInfoLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lblVaccineBrandHeader)
                .addGap(18, 18, 18)
                .addGroup(pnlBrandInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scrlpneBrandInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlBrandInfoLayout.createSequentialGroup()
                        .addComponent(btnInfoBrandForward)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnInfoBrandBackward)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAddBrand)
                .addGap(20, 20, 20))
        );

        lblWhereWeVaccinateHeader.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        lblWhereWeVaccinateHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblWhereWeVaccinateHeader.setText("W H E R E   A R E   W E   V A C C I N A T I N G ?");

        javax.swing.GroupLayout pnlOurProgressLayout = new javax.swing.GroupLayout(pnlOurProgress);
        pnlOurProgress.setLayout(pnlOurProgressLayout);
        pnlOurProgressLayout.setHorizontalGroup(
            pnlOurProgressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOurProgressLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(pnlCapeTownInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(pnlOurProgressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scrlpneTblZipVaccination, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)
                    .addComponent(pnlBrandInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblWhereWeVaccinateHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30))
        );
        pnlOurProgressLayout.setVerticalGroup(
            pnlOurProgressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlOurProgressLayout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(pnlOurProgressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(pnlOurProgressLayout.createSequentialGroup()
                        .addComponent(lblWhereWeVaccinateHeader)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrlpneTblZipVaccination, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pnlBrandInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pnlCapeTownInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );

        desktoppnlContainer.add(pnlOurProgress, "card8");

        pnlVaccinationDetails.setBackground(new java.awt.Color(255, 255, 255));

        lblAddVaccinationCitizenConfirmHeader.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblAddVaccinationCitizenConfirmHeader.setText("Citizen");

        lblPreviewAge.setText(" ");

        lblPreviewRiskLevel.setText(" ");

        lblPreviewName.setText(" ");

        lblPreviewID.setFont(new java.awt.Font("Lucida Grande", 2, 13)); // NOI18N
        lblPreviewID.setText(" ");

        lblAddVaccinationCentreConfirmHeader.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblAddVaccinationCentreConfirmHeader.setText("Centre");

        lblPreviewCentreName.setText(" ");

        lblPreviewCentreDistance.setText(" ");

        lblAddVaccinationBrandConfirmHeader.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblAddVaccinationBrandConfirmHeader.setText("Brand");

        lblPreviewBrandCommonName.setText(" ");

        lblPreviewBrandName.setText(" ");

        lblAddVaccinationDateConfirmHeader.setText("Date Administered");

        javax.swing.GroupLayout pnlVaccinationDetailsLayout = new javax.swing.GroupLayout(pnlVaccinationDetails);
        pnlVaccinationDetails.setLayout(pnlVaccinationDetailsLayout);
        pnlVaccinationDetailsLayout.setHorizontalGroup(
            pnlVaccinationDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlVaccinationDetailsLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(pnlVaccinationDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlVaccinationDetailsLayout.createSequentialGroup()
                        .addComponent(lblAddVaccinationDateConfirmHeader, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                        .addGap(131, 131, 131))
                    .addGroup(pnlVaccinationDetailsLayout.createSequentialGroup()
                        .addGroup(pnlVaccinationDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblAddVaccinationCitizenConfirmHeader, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                            .addComponent(lblAddVaccinationCentreConfirmHeader, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblAddVaccinationBrandConfirmHeader, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblPreviewCentreDistance, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblPreviewCentreName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblPreviewAge, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblPreviewRiskLevel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblPreviewID, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblPreviewName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                            .addComponent(lblPreviewBrandCommonName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblPreviewBrandName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        pnlVaccinationDetailsLayout.setVerticalGroup(
            pnlVaccinationDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlVaccinationDetailsLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(lblAddVaccinationCitizenConfirmHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPreviewName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPreviewID)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPreviewRiskLevel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPreviewAge)
                .addGap(18, 18, 18)
                .addComponent(lblAddVaccinationCentreConfirmHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPreviewCentreName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPreviewCentreDistance)
                .addGap(18, 18, 18)
                .addComponent(lblAddVaccinationBrandConfirmHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPreviewBrandCommonName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPreviewBrandName)
                .addGap(33, 33, 33)
                .addComponent(lblAddVaccinationDateConfirmHeader)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        desktoppnlNewVaccination.setLayout(new java.awt.CardLayout());

        pnlNewVaccinationCitizen.setBackground(new java.awt.Color(255, 255, 255));

        cmbAddVaccinationCitizen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAddVaccinationCitizenActionPerformed(evt);
            }
        });

        lblAddVaccinationCitizenInstruct1.setText("Who is being vaccinated?");

        lblAddVaccinationCitizenHeader.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblAddVaccinationCitizenHeader.setText("Citizen");

        lblAddVaccinationCitizenInstruct2.setText("(if citizen doesn't show here, add in citizen portal)");

        btnAddVaccinationCitizenNext.setText("Next");
        btnAddVaccinationCitizenNext.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddVaccinationCitizenNextMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnlNewVaccinationCitizenLayout = new javax.swing.GroupLayout(pnlNewVaccinationCitizen);
        pnlNewVaccinationCitizen.setLayout(pnlNewVaccinationCitizenLayout);
        pnlNewVaccinationCitizenLayout.setHorizontalGroup(
            pnlNewVaccinationCitizenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNewVaccinationCitizenLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(pnlNewVaccinationCitizenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlNewVaccinationCitizenLayout.createSequentialGroup()
                        .addGroup(pnlNewVaccinationCitizenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cmbAddVaccinationCitizen, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAddVaccinationCitizenNext, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30))
                    .addGroup(pnlNewVaccinationCitizenLayout.createSequentialGroup()
                        .addGroup(pnlNewVaccinationCitizenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAddVaccinationCitizenInstruct2)
                            .addComponent(lblAddVaccinationCitizenHeader)
                            .addComponent(lblAddVaccinationCitizenInstruct1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(55, 119, Short.MAX_VALUE))))
        );
        pnlNewVaccinationCitizenLayout.setVerticalGroup(
            pnlNewVaccinationCitizenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNewVaccinationCitizenLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(lblAddVaccinationCitizenHeader)
                .addGap(12, 12, 12)
                .addComponent(lblAddVaccinationCitizenInstruct1)
                .addGap(4, 4, 4)
                .addComponent(lblAddVaccinationCitizenInstruct2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbAddVaccinationCitizen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(btnAddVaccinationCitizenNext)
                .addGap(30, 30, 30))
        );

        desktoppnlNewVaccination.add(pnlNewVaccinationCitizen, "card2");

        pnlNewVaccinationCentre.setBackground(new java.awt.Color(255, 255, 255));

        cmbAddVaccinationCentre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAddVaccinationCentreActionPerformed(evt);
            }
        });

        lblAddVaccinationCentreHeader.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblAddVaccinationCentreHeader.setText("Centre");

        lblAddVaccinationCentreInstruct.setText("At which centre is this vaccination being administered?");

        btnAddVaccinationCentreBack.setText("Back");
        btnAddVaccinationCentreBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddVaccinationCentreBackMouseClicked(evt);
            }
        });

        btnAddVaccinationCentreNext.setText("Next");
        btnAddVaccinationCentreNext.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddVaccinationCentreNextMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnlNewVaccinationCentreLayout = new javax.swing.GroupLayout(pnlNewVaccinationCentre);
        pnlNewVaccinationCentre.setLayout(pnlNewVaccinationCentreLayout);
        pnlNewVaccinationCentreLayout.setHorizontalGroup(
            pnlNewVaccinationCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNewVaccinationCentreLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(pnlNewVaccinationCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlNewVaccinationCentreLayout.createSequentialGroup()
                        .addComponent(lblAddVaccinationCentreHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(251, 304, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlNewVaccinationCentreLayout.createSequentialGroup()
                        .addGroup(pnlNewVaccinationCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblAddVaccinationCentreInstruct, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbAddVaccinationCentre, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(pnlNewVaccinationCentreLayout.createSequentialGroup()
                                .addComponent(btnAddVaccinationCentreBack, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAddVaccinationCentreNext, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(30, 30, 30))))
        );
        pnlNewVaccinationCentreLayout.setVerticalGroup(
            pnlNewVaccinationCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlNewVaccinationCentreLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(lblAddVaccinationCentreHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(lblAddVaccinationCentreInstruct)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbAddVaccinationCentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(pnlNewVaccinationCentreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddVaccinationCentreBack)
                    .addComponent(btnAddVaccinationCentreNext))
                .addGap(30, 30, 30))
        );

        desktoppnlNewVaccination.add(pnlNewVaccinationCentre, "card4");

        pnlConfirmation.setBackground(new java.awt.Color(255, 255, 255));

        btnNewVaccinationVaccinate.setText("Vaccinate");
        btnNewVaccinationVaccinate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnNewVaccinationVaccinateMouseClicked(evt);
            }
        });

        lblAddVaccinationDate.setText("When was this vaccination performed?");

        lblAddVaccinationConfirmHeader.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblAddVaccinationConfirmHeader.setText("Confirmation");

        btnAddVaccinationBack.setText("Back");
        btnAddVaccinationBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddVaccinationBackMouseClicked(evt);
            }
        });

        spnDate.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), new java.util.Date(1601812260000L), null, java.util.Calendar.DAY_OF_WEEK));
        spnDate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnDateStateChanged(evt);
            }
        });
        spnDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                spnDateMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnlConfirmationLayout = new javax.swing.GroupLayout(pnlConfirmation);
        pnlConfirmation.setLayout(pnlConfirmationLayout);
        pnlConfirmationLayout.setHorizontalGroup(
            pnlConfirmationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlConfirmationLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(pnlConfirmationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAddVaccinationDate)
                    .addComponent(spnDate, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlConfirmationLayout.createSequentialGroup()
                        .addGap(166, 166, 166)
                        .addComponent(lblAddVaccinationConfirmHeader)))
                .addContainerGap(51, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlConfirmationLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAddVaccinationBack, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNewVaccinationVaccinate)
                .addGap(37, 37, 37))
        );
        pnlConfirmationLayout.setVerticalGroup(
            pnlConfirmationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlConfirmationLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(lblAddVaccinationConfirmHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblAddVaccinationDate, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(spnDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlConfirmationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddVaccinationBack)
                    .addComponent(btnNewVaccinationVaccinate))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        desktoppnlNewVaccination.add(pnlConfirmation, "card5");

        pnlNewVaccinationBrand.setBackground(new java.awt.Color(255, 255, 255));

        cmbAddVaccinationBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAddVaccinationBrandActionPerformed(evt);
            }
        });

        lblAddVaccinationBrandHeader.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblAddVaccinationBrandHeader.setText("Brand");

        btnAddVaccinationBrandNext.setText("Next");
        btnAddVaccinationBrandNext.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddVaccinationBrandNextMouseClicked(evt);
            }
        });
        btnAddVaccinationBrandNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddVaccinationBrandNextActionPerformed(evt);
            }
        });

        btnAddVaccinationBrandBack.setText("Back");
        btnAddVaccinationBrandBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddVaccinationBrandBackMouseClicked(evt);
            }
        });

        lblAddVaccinationBrandInstruct.setText("What brand of vaccine has been administered?");

        javax.swing.GroupLayout pnlNewVaccinationBrandLayout = new javax.swing.GroupLayout(pnlNewVaccinationBrand);
        pnlNewVaccinationBrand.setLayout(pnlNewVaccinationBrandLayout);
        pnlNewVaccinationBrandLayout.setHorizontalGroup(
            pnlNewVaccinationBrandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNewVaccinationBrandLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(pnlNewVaccinationBrandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlNewVaccinationBrandLayout.createSequentialGroup()
                        .addGroup(pnlNewVaccinationBrandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cmbAddVaccinationBrand, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(pnlNewVaccinationBrandLayout.createSequentialGroup()
                                .addComponent(btnAddVaccinationBrandBack, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAddVaccinationBrandNext, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(30, 30, 30))
                    .addGroup(pnlNewVaccinationBrandLayout.createSequentialGroup()
                        .addComponent(lblAddVaccinationBrandHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(265, 304, Short.MAX_VALUE))
                    .addGroup(pnlNewVaccinationBrandLayout.createSequentialGroup()
                        .addComponent(lblAddVaccinationBrandInstruct, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        pnlNewVaccinationBrandLayout.setVerticalGroup(
            pnlNewVaccinationBrandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlNewVaccinationBrandLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(lblAddVaccinationBrandHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(lblAddVaccinationBrandInstruct)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbAddVaccinationBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlNewVaccinationBrandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddVaccinationBrandNext)
                    .addComponent(btnAddVaccinationBrandBack))
                .addGap(30, 30, 30))
        );

        desktoppnlNewVaccination.add(pnlNewVaccinationBrand, "card3");

        lblAddVaccinationHeader.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        lblAddVaccinationHeader.setForeground(new java.awt.Color(255, 255, 255));
        lblAddVaccinationHeader.setText("A D D  V A C C I N A T I O N");

        lblPortalHeader.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        lblPortalHeader.setForeground(new java.awt.Color(255, 255, 255));
        lblPortalHeader.setText("P O R T A L");

        lblAddVaccinationInstructHeader.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblAddVaccinationInstructHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAddVaccinationInstructHeader.setText("Log all the vaccinations administered through the portal below");

        lblAddVaccinationInstruct1.setText("1. Select the citizen that has been vaccinated and click 'Next'");

        lblAddVaccinationInstruct2.setText("2. Select the centre at which the vaccine was administered then 'Next'");

        lblAddVaccinationInstruct3.setText("3. Select the brand of vaccine that was administered");

        lblAddVaccinationInstruct4.setText("4. Consult the details on the right and if all is in order, click Confirm");

        lblAddVaccinationInstruct5.setText("5. If the vaccination has been added, you will receive a notification");

        javax.swing.GroupLayout pnlAddVaccinationLayout = new javax.swing.GroupLayout(pnlAddVaccination);
        pnlAddVaccination.setLayout(pnlAddVaccinationLayout);
        pnlAddVaccinationLayout.setHorizontalGroup(
            pnlAddVaccinationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAddVaccinationLayout.createSequentialGroup()
                .addGroup(pnlAddVaccinationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAddVaccinationLayout.createSequentialGroup()
                        .addGroup(pnlAddVaccinationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlAddVaccinationLayout.createSequentialGroup()
                                .addGap(87, 87, 87)
                                .addComponent(lblAddVaccinationHeader)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(pnlAddVaccinationLayout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(pnlAddVaccinationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblAddVaccinationInstructHeader, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(desktoppnlNewVaccination)
                                    .addComponent(lblAddVaccinationInstruct2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblAddVaccinationInstruct1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAddVaccinationLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(pnlAddVaccinationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblAddVaccinationInstruct5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblAddVaccinationInstruct4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)
                                    .addComponent(lblAddVaccinationInstruct3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(pnlAddVaccinationLayout.createSequentialGroup()
                        .addGap(179, 179, 179)
                        .addComponent(lblPortalHeader)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(pnlVaccinationDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );
        pnlAddVaccinationLayout.setVerticalGroup(
            pnlAddVaccinationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAddVaccinationLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(pnlAddVaccinationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlVaccinationDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAddVaccinationLayout.createSequentialGroup()
                        .addComponent(lblAddVaccinationHeader)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPortalHeader)
                        .addGap(12, 12, 12)
                        .addComponent(lblAddVaccinationInstructHeader)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblAddVaccinationInstruct1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblAddVaccinationInstruct2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblAddVaccinationInstruct3, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblAddVaccinationInstruct4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblAddVaccinationInstruct5)
                        .addGap(24, 24, 24)
                        .addComponent(desktoppnlNewVaccination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30))
        );

        desktoppnlContainer.add(pnlAddVaccination, "card6");

        txfSupplyLeft.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        lstBrand.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstBrand.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstBrandValueChanged(evt);
            }
        });
        scrlpneBrandList.setViewportView(lstBrand);

        tblCentreVaccines.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Centre", "Doses Received", "Doses Left"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        scrlpaneTblAcquisitions.setViewportView(tblCentreVaccines);
        if (tblCentreVaccines.getColumnModel().getColumnCount() > 0) {
            tblCentreVaccines.getColumnModel().getColumn(0).setPreferredWidth(150);
        }

        txfTotalDoses.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        lblTotalOfBrand.setText("Total");

        lblTotalRemainingOfBrand.setText("Remaining");

        lblTotalVaccinesUnaddressed.setText("Total Vaccines Unaddressed:");

        txfTotalVaccinesUnaddress.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        pnlShipment.setBackground(new java.awt.Color(255, 255, 255));

        btnDosesReceived.setText("Received");
        btnDosesReceived.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDosesReceivedMouseClicked(evt);
            }
        });

        lblShipmentHeader.setText("New Shipments");

        cmbAcquisitionsCapeReserveBrands.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblShipmentDoses.setText("Doses");

        spnAcquisitionDoses.setModel(new javax.swing.SpinnerNumberModel(100, 1, null, 100));

        javax.swing.GroupLayout pnlShipmentLayout = new javax.swing.GroupLayout(pnlShipment);
        pnlShipment.setLayout(pnlShipmentLayout);
        pnlShipmentLayout.setHorizontalGroup(
            pnlShipmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlShipmentLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlShipmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlShipmentLayout.createSequentialGroup()
                        .addComponent(lblShipmentHeader)
                        .addGap(185, 185, 185))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlShipmentLayout.createSequentialGroup()
                        .addComponent(btnDosesReceived, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(140, 140, 140))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlShipmentLayout.createSequentialGroup()
                        .addGroup(pnlShipmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cmbAcquisitionsCapeReserveBrands, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlShipmentLayout.createSequentialGroup()
                                .addComponent(lblShipmentDoses, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(spnAcquisitionDoses, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(70, 70, 70))))
        );
        pnlShipmentLayout.setVerticalGroup(
            pnlShipmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlShipmentLayout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(lblShipmentHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbAcquisitionsCapeReserveBrands, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlShipmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblShipmentDoses)
                    .addComponent(spnAcquisitionDoses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDosesReceived)
                .addGap(14, 14, 14))
        );

        lblCapeTownReserve.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        lblCapeTownReserve.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCapeTownReserve.setText("Cape Town Reserve");

        lblCapeTownAddress.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCapeTownAddress.setText("Address");

        lblCapeTownZipCode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCapeTownZipCode.setText("ZIP code");

        lblCapeTownAddressHeader.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblCapeTownAddressHeader.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCapeTownAddressHeader.setText("Address");

        lblDeliveriesHeader.setBackground(new java.awt.Color(255, 255, 255));
        lblDeliveriesHeader.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        lblDeliveriesHeader.setForeground(new java.awt.Color(255, 255, 255));
        lblDeliveriesHeader.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDeliveriesHeader.setText("D E L I V E R I E S");

        javax.swing.GroupLayout pnlAcquisitionLayout = new javax.swing.GroupLayout(pnlAcquisition);
        pnlAcquisition.setLayout(pnlAcquisitionLayout);
        pnlAcquisitionLayout.setHorizontalGroup(
            pnlAcquisitionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAcquisitionLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(pnlAcquisitionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sptrAcquisitionsFromDeliveries)
                    .addGroup(pnlAcquisitionLayout.createSequentialGroup()
                        .addGroup(pnlAcquisitionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlAcquisitionLayout.createSequentialGroup()
                                .addComponent(lblTotalVaccinesUnaddressed, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txfTotalVaccinesUnaddress, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(sptrTotalBrandfromReserve)
                            .addGroup(pnlAcquisitionLayout.createSequentialGroup()
                                .addGroup(pnlAcquisitionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblTotalRemainingOfBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblTotalOfBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(pnlAcquisitionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txfSupplyLeft, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txfTotalDoses, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(lblCapeTownAddress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCapeTownReserve, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCapeTownZipCode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCapeTownAddressHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(pnlAcquisitionLayout.createSequentialGroup()
                                .addComponent(scrlpneBrandList, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(lblDeliveriesHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlAcquisitionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(pnlShipment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(scrlpaneTblAcquisitions, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE))))
                .addGap(30, 30, 30))
        );
        pnlAcquisitionLayout.setVerticalGroup(
            pnlAcquisitionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAcquisitionLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(pnlAcquisitionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(scrlpaneTblAcquisitions, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(pnlAcquisitionLayout.createSequentialGroup()
                        .addComponent(scrlpneBrandList, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlAcquisitionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTotalOfBrand)
                            .addComponent(txfTotalDoses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlAcquisitionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTotalRemainingOfBrand)
                            .addComponent(txfSupplyLeft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sptrTotalBrandfromReserve, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlAcquisitionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txfTotalVaccinesUnaddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTotalVaccinesUnaddressed))))
                .addGap(18, 18, 18)
                .addComponent(sptrAcquisitionsFromDeliveries, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(pnlAcquisitionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlShipment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlAcquisitionLayout.createSequentialGroup()
                        .addComponent(lblDeliveriesHeader)
                        .addGap(18, 18, 18)
                        .addComponent(lblCapeTownReserve)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCapeTownAddressHeader)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCapeTownAddress)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCapeTownZipCode)))
                .addGap(30, 30, 30))
        );

        desktoppnlContainer.add(pnlAcquisition, "card9");

        getContentPane().add(desktoppnlContainer);
        desktoppnlContainer.setBounds(220, 83, 830, 500);

        btnVaccinationPanel.setText("Vaccination Log");
        btnVaccinationPanel.setToolTipText("Opens Vaccination Log");
        btnVaccinationPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnVaccinationPanelMouseClicked(evt);
            }
        });
        btnVaccinationPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVaccinationPanelActionPerformed(evt);
            }
        });
        getContentPane().add(btnVaccinationPanel);
        btnVaccinationPanel.setBounds(30, 312, 160, 29);

        btnCentrePanel.setText("Centres");
        btnCentrePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCentrePanelMouseClicked(evt);
            }
        });
        getContentPane().add(btnCentrePanel);
        btnCentrePanel.setBounds(30, 347, 160, 29);

        btnHouseholdPanel.setText("Households");
        btnHouseholdPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnHouseholdPanelMouseClicked(evt);
            }
        });
        getContentPane().add(btnHouseholdPanel);
        btnHouseholdPanel.setBounds(30, 382, 160, 29);

        btnCitizenPanel.setText("Citizens");
        btnCitizenPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCitizenPanelMouseClicked(evt);
            }
        });
        getContentPane().add(btnCitizenPanel);
        btnCitizenPanel.setBounds(30, 417, 160, 29);

        btnNewVaccinationPanel.setText("Add Vaccination");
        btnNewVaccinationPanel.setToolTipText("Opens the portal to add a vaccination");
        btnNewVaccinationPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnNewVaccinationPanelMouseClicked(evt);
            }
        });
        getContentPane().add(btnNewVaccinationPanel);
        btnNewVaccinationPanel.setBounds(30, 277, 160, 29);

        btnHelpPanel.setText("Help");
        btnHelpPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnHelpPanelMouseClicked(evt);
            }
        });
        btnHelpPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpPanelActionPerformed(evt);
            }
        });
        getContentPane().add(btnHelpPanel);
        btnHelpPanel.setBounds(30, 554, 160, 29);

        btnOurProgressPanel.setText("Our Progress");
        btnOurProgressPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOurProgressPanelMouseClicked(evt);
            }
        });
        getContentPane().add(btnOurProgressPanel);
        btnOurProgressPanel.setBounds(30, 503, 160, 29);

        btnAcquisitionsPanel.setText("Acquisitions");
        btnAcquisitionsPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAcquisitionsPanelMouseClicked(evt);
            }
        });
        getContentPane().add(btnAcquisitionsPanel);
        btnAcquisitionsPanel.setBounds(30, 468, 160, 29);

        lblAccessLevel.setText("Access Level:");
        getContentPane().add(lblAccessLevel);
        lblAccessLevel.setBounds(830, 30, 84, 16);

        lblUsername.setText("Username:");
        getContentPane().add(lblUsername);
        lblUsername.setBounds(830, 50, 90, 16);

        lblUserAccessLevel.setText(" ");
        getContentPane().add(lblUserAccessLevel);
        lblUserAccessLevel.setBounds(930, 30, 110, 16);

        lblUserUsername.setText(" ");
        getContentPane().add(lblUserUsername);
        lblUserUsername.setBounds(930, 50, 120, 16);
        getContentPane().add(sptrButton1);
        sptrButton1.setBounds(30, 452, 160, 10);
        getContentPane().add(sptrBottom);
        sptrBottom.setBounds(30, 538, 160, 10);

        lblwelcome.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        lblwelcome.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblwelcome.setText("Welcome, New User!");
        getContentPane().add(lblwelcome);
        lblwelcome.setBounds(220, 30, 550, 40);

        btnUserManagement.setText("User Management");
        btnUserManagement.setToolTipText("Opens User Management and Messaging Portals");
        btnUserManagement.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnUserManagementMouseClicked(evt);
            }
        });
        getContentPane().add(btnUserManagement);
        btnUserManagement.setBounds(30, 242, 160, 29);

        lblLogoWavebreaker.setFont(new java.awt.Font("Morganite", 0, 70)); // NOI18N
        lblLogoWavebreaker.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLogoWavebreaker.setText("WAVEBREAKER");
        lblLogoWavebreaker.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblLogoWavebreakerMouseClicked(evt);
            }
        });
        getContentPane().add(lblLogoWavebreaker);
        lblLogoWavebreaker.setBounds(10, 100, 200, 70);

        lblLogoApplication.setFont(new java.awt.Font("Hiragino Sans", 0, 13)); // NOI18N
        lblLogoApplication.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLogoApplication.setText("a p p l i c a t i o n");
        getContentPane().add(lblLogoApplication);
        lblLogoApplication.setBounds(30, 160, 160, 21);
        getContentPane().add(sptrTopLogo);
        sptrTopLogo.setBounds(60, 70, 110, 12);
        getContentPane().add(sptrBottomLogo);
        sptrBottomLogo.setBounds(60, 190, 110, 12);
        getContentPane().add(lblBackground);
        lblBackground.setBounds(-4, -4, 1090, 620);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lstHouseholdValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstHouseholdValueChanged
        // TODO add your handling code here:
        if (lstHousehold.getSelectedIndex() != -1) {
            Centre[] centreArr = centreHandler.getCentreArr();
            Household[] householdArr = householdHandler.getHouseholdArr();
            Citizen[] emptyCitizens = new Citizen[0];
            Household currentHousehold = householdArr[lstHousehold.getSelectedIndex()];
            lblAddress.setText(currentHousehold.getStreetAddress());
            lblCoordinates.setText(currentHousehold.getCoordinateString());
            
            lblHouseholdZipCode.setText("" + currentHousehold.getZipCode());

            //OCCUPANTS INTERNAL
            //Finding closest centre
            int sumRiskOne = 0;
            int sumRiskTwo = 0;
            int sumRiskThree = 0;
            int sumRiskFour = 0;
            Centre lowestCentre = centreHandler.getClosestCentre(currentHousehold);
            double lowestDistance = getDistanceKilometres(currentHousehold.getCoordinates(), lowestCentre.getCoordinates());
            lblClosestCentre.setText(lowestCentre.getName() + " (" + (int) (lowestDistance) + " km)");
            lowestDistance = 0.0;

            int citizenNum = 0;
            double sumAge = 0;
            Citizen[] citizenArr = citizenHandler.getCitizenArr();
            for (int i = 0; i < citizenArr.length; i++) {
                if (citizenArr[i].getHousehold().getId() == currentHousehold.getId()) {
                    citizenNum++;
                    sumAge += (1.0 * citizenArr[i].getAge());

                }
            }

            lblNumOccupants.setText("/" + citizenNum);
            lblNumberOfOccupants.setText("" + citizenNum);
            if (citizenNum > 0) {
                txfHouseholdOccupantAvgAge.setText("" + ((int) (sumAge * 100.0 / (double) citizenNum)) / 100.0);
            } else {
                txfHouseholdOccupantAvgAge.setText("-");
            }

            Citizen[] citizenHousehold = new Citizen[citizenNum];

            DefaultTableModel model = (DefaultTableModel) tblHouseholdInternalOccupants.getModel();
            int rowCount = citizenHousehold.length;
            for (int x = 0; x > rowCount; x++) {
                model.removeRow(x);
            }
            model.setNumRows(rowCount);

            citizenNum = 0;
            for (int j = 1; j <= 4; j++) {
                for (int i = 0; i < citizenArr.length; i++) {
                    if (citizenArr[i].getHousehold().getId() == (currentHousehold.getId()) && citizenArr[i].getRiskLevelNum() == j) {
                        citizenHousehold[citizenNum] = citizenArr[i];
                        citizenNum++;
                        switch (citizenArr[i].getRiskLevelNum()) {
                            case Citizen.PHASE_ONE:
                                sumRiskOne++;
                                break;
                            case Citizen.PHASE_TWO:
                                sumRiskTwo++;
                                break;
                            case Citizen.PHASE_THREE:
                                sumRiskThree++;
                                break;
                            case Citizen.PHASE_FOUR:
                                sumRiskFour++;
                                break;
                            default:
                                break;
                        }

                    }

                }
            }
            txfHouseholdRisk1.setText("" + sumRiskOne);
            txfHouseholdRisk2.setText("" + sumRiskTwo);
            txfHouseholdRisk3.setText("" + sumRiskThree);
            txfHouseholdRisk4.setText("" + sumRiskFour);

            int numVaccinated = 0;
            if (citizenHousehold.length > 0) {
                for (int i = 0; i < citizenHousehold.length; i++) {
                    tblHouseholdInternalOccupants.setValueAt(citizenHousehold[i].getFullName(), i, 0);
                    tblHouseholdInternalOccupants.setValueAt(citizenHousehold[i].getRiskLevelString(), i, 1);
                    if (citizenHousehold[i].getIsVaccinated()) {
                        numVaccinated++;
                    } else {

                    }
                }
            }
            txfHouseholdInternalOccupantsNumVaccinated.setText("" + numVaccinated);
        }

    }//GEN-LAST:event_lstHouseholdValueChanged

    private void btnCentreDetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCentreDetailsMouseClicked
        // TODO add your handling code here:
        if (lstHousehold.getSelectedIndex() != -1) {
            Centre[] centreArr = centreHandler.getCentreArr();
            Household[] householdArr = householdHandler.getHouseholdArr();
            Household currentHousehold = householdArr[lstHousehold.getSelectedIndex()];
            Centre closestCentre = centreHandler.getClosestCentre(currentHousehold);
            JOptionPane.showMessageDialog(this, closestCentre.getName() + "\n(" + (int) getDistanceKilometres(currentHousehold.getCoordinates(), closestCentre.getCoordinates()) + " km away from " + currentHousehold.getStreetAddress() + ")\nAddress: " + closestCentre.getStreetAddress());
        }
    }//GEN-LAST:event_btnCentreDetailsMouseClicked

    private void btnHouseholdPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHouseholdPanelMouseClicked
        // TODO add your handling code here:
        switchPanel(pnlHousehold, desktoppnlContainer);
    }//GEN-LAST:event_btnHouseholdPanelMouseClicked

    private void btnCentrePanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCentrePanelMouseClicked
        // TODO add your handling code here:
        switchPanel(pnlCentre, desktoppnlContainer);
    }//GEN-LAST:event_btnCentrePanelMouseClicked

    private void btnVaccinationPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVaccinationPanelMouseClicked
        // TODO add your handling code here:
        switchPanel(pnlVaccinationLog, desktoppnlContainer);
    }//GEN-LAST:event_btnVaccinationPanelMouseClicked

    private void btnCitizenPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCitizenPanelMouseClicked
        // TODO add your handling code here:

        switchPanel(pnlCitizen, desktoppnlContainer);
    }//GEN-LAST:event_btnCitizenPanelMouseClicked

    private void lstCentreValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstCentreValueChanged
        // TODO add your handling code here:
        Vaccination[] vaccinationArr = vaccinationHandler.getVaccinationArr();
        txaRecentVaccinations.setText("");
        Centre[] centreArr = centreHandler.getCentreArr();
        //if there is a centre selected
        if (lstCentre.getSelectedIndex() != -1) {
            Centre currentCentre = centreArr[lstCentre.getSelectedIndex()];
            //display information
            txfCentreName.setText(currentCentre.getName());
            txfCentreAddress.setText(currentCentre.getStreetAddress());
            txfCentreZipCode.setText(currentCentre.getZipCode());
            lblCentreNumVaccine.setText("" + currentCentre.getAvailableVaccines());
            lblCentreCoordinates.setText("" + currentCentre.getCoordinateString());
            //if there are vaccinations that have happened at current centre
            for (int i = 0; i < vaccinationArr.length; i++) {
                if (vaccinationArr[i].getCentre().getId() == currentCentre.getId()) {
                    txaRecentVaccinations.setText(txaRecentVaccinations.getText() + "[" + vaccinationArr[i].getDate() + "] " + vaccinationArr[i].getCitizen().getFullName() + " (" + vaccinationArr[i].getBrand().getName() + ")\n");
                }
            }
        }
    }//GEN-LAST:event_lstCentreValueChanged

    private void btnNewVaccinationPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNewVaccinationPanelMouseClicked
        // TODO add your handling code here:
        switchPanel(pnlAddVaccination, desktoppnlContainer);
    }//GEN-LAST:event_btnNewVaccinationPanelMouseClicked

    private void btnHelpPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHelpPanelMouseClicked
        // TODO add your handling code here:
        switchPanel(pnlHelp, desktoppnlContainer);
    }//GEN-LAST:event_btnHelpPanelMouseClicked

    private void btnOurProgressPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnOurProgressPanelMouseClicked
        // TODO add your handling code here:
        switchPanel(pnlOurProgress, desktoppnlContainer);
    }//GEN-LAST:event_btnOurProgressPanelMouseClicked

    private void btnAcquisitionsPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAcquisitionsPanelMouseClicked
        // TODO add your handling code here:
        switchPanel(pnlAcquisition, desktoppnlContainer);


    }//GEN-LAST:event_btnAcquisitionsPanelMouseClicked

    private void lstBrandValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstBrandValueChanged
        // TODO add your handling code here:
        if (lstBrand.getSelectedIndex() != -1) {

            Brand currentBrand = brandHandler.getBrandArr()[lstBrand.getSelectedIndex()];
            txfTotalDoses.setText("" + formatNumber(currentBrand.getSupplyReceived()));
            txfSupplyLeft.setText("" + formatNumber(currentBrand.getSupplyReceived() - currentBrand.getSupplyAdministered()));
            updateAcquisitionTable(currentBrand);
        }
    }//GEN-LAST:event_lstBrandValueChanged

    private void btnHouseholdGoogleMapsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHouseholdGoogleMapsMouseClicked
        // TODO add your handling code here:
        if (lstHousehold.getSelectedIndex() != -1) {
            Household[] householdArr = householdHandler.getHouseholdArr();
            boolean searched = ExternalHandler.searchPlace(householdArr[lstHousehold.getSelectedIndex()].getCoordinates());
            if(!searched){
                JOptionPane.showMessageDialog(this, "There was an issue trying to open your Chrome Browser\nConfirm that chrome browser has been installed\n\nIf not, visit this link: https://www.google.com/chrome/");
            }
        }
    }//GEN-LAST:event_btnHouseholdGoogleMapsMouseClicked

    private void btnHouseholdDirectionsToCentreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHouseholdDirectionsToCentreMouseClicked
        // TODO add your handling code here:
        if (lstHousehold.getSelectedIndex() != -1) {
            Centre[] centreArr = centreHandler.getCentreArr();
            Household[] householdArr = householdHandler.getHouseholdArr();
            Household currentHousehold = householdArr[lstHousehold.getSelectedIndex()];
            Centre closestCentre = centreHandler.getClosestCentre(currentHousehold);
            boolean searched = ExternalHandler.searchPlace(householdArr[lstHousehold.getSelectedIndex()].getCoordinates(), closestCentre.getCoordinates());
            if(!searched){
                JOptionPane.showMessageDialog(this, "There was an issue trying to open your Chrome Browser\nConfirm that chrome browser has been installed\n\nIf not, visit this link: https://www.google.com/chrome/");
            }
        }
    }//GEN-LAST:event_btnHouseholdDirectionsToCentreMouseClicked

    private void btnHouseholdAboutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHouseholdAboutMouseClicked
        // TODO add your handling code here:
        switchPanel(pnlHouseholdAbout, desktoppnlHousehold);
    }//GEN-LAST:event_btnHouseholdAboutMouseClicked

    private void btnHouseholdOccupantsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHouseholdOccupantsMouseClicked
        // TODO add your handling code here:
        switchPanel(pnlHouseholdOccupants, desktoppnlHousehold);
    }//GEN-LAST:event_btnHouseholdOccupantsMouseClicked

    private void btnHouseholdNewHouseholdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHouseholdNewHouseholdMouseClicked
        // TODO add your handling code here:
        User currentUser = citizenHandler.getCurrentUser();
        if (currentUser.isIsAdmin()) {
            switchPanel(pnlHouseholdNewHousehold, desktoppnlHousehold);
            
            enableOutsideApp(false);
            
        } else {
            JOptionPane.showMessageDialog(this, "You are not authorised to perform this task");
        }

    }//GEN-LAST:event_btnHouseholdNewHouseholdMouseClicked

    private void btnCentreInternalVaccinationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCentreInternalVaccinationMouseClicked
        // TODO add your handling code here:
        switchPanel(pnlCentreInternalRecentVaccination, desktoppnlCentre);
    }//GEN-LAST:event_btnCentreInternalVaccinationMouseClicked

    private void btnCentreInternalMoreInfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCentreInternalMoreInfoMouseClicked
        // TODO add your handling code here:
        switchPanel(pnlCentreInternalAbout, desktoppnlCentre);
    }//GEN-LAST:event_btnCentreInternalMoreInfoMouseClicked

    private void btnCentreInternalNewCentreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCentreInternalNewCentreMouseClicked
        // TODO add your handling code here:
        User currentUser = citizenHandler.getCurrentUser();
        if (currentUser.isIsAdmin()) {
            switchPanel(pnlCentreInternalNewCentre, desktoppnlCentre);
            
            boolean bool = false;
            enableOutsideApp(bool);
            lstCentre.setEnabled(bool);
            btnCentreInternalVaccination.setEnabled(bool);
            btnCentreInternalMoreInfo.setEnabled(bool);
            btnLstCentreFirst.setEnabled(bool);
            btnLstCentreLast.setEnabled(bool);
            btnLstCentreNext.setEnabled(bool);
            btnLstCentrePrev.setEnabled(bool);
            
        } else {
            JOptionPane.showMessageDialog(this, "You are not authorised to perform this task");
        }

    }//GEN-LAST:event_btnCentreInternalNewCentreMouseClicked

    private void btnCentreInternalVaccinationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCentreInternalVaccinationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCentreInternalVaccinationActionPerformed

    private void btnVaccinationPanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVaccinationPanelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnVaccinationPanelActionPerformed

    private void lstCitizenValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstCitizenValueChanged
        // TODO add your handling code here:
        if (lstCitizen.getSelectedIndex() != -1) {
            Centre[] centreArr = centreHandler.getCentreArr();
            Citizen[] citizenArr = citizenHandler.getCitizenArr();
            Citizen currentCitizen = citizenArr[lstCitizen.getSelectedIndex()];
            txfCitizenInternalFirstName.setText(currentCitizen.getFirstName());
            txfCitizenInternalLastName.setText(currentCitizen.getLastName());
            if (currentCitizen.getPersonalId().charAt(10) == '0') {
                lblCitizenInternalSACitizen.setText("Citizen");
            } else {
                lblCitizenInternalSACitizen.setText("Resident");
            }
            if (Integer.parseInt("" + currentCitizen.getPersonalId().charAt(6)) > 4) {
                lblCitizenInternalSex.setText("Male");
            } else {
                lblCitizenInternalSex.setText("Female");
            }
            lblCitizenInternalRiskLevel.setText(currentCitizen.getRiskLevelString());
            txfCitizenInternalContactNumber.setText(currentCitizen.getContactNumber());
            //txfCitizenInternalHouseholdAddress.setText(currentCitizen.getHousehold().getAddress());
            if (currentCitizen.getIsVaccinated()) {
                txfCitizenInternalVaccinationStatus.setText("VACCINATED");
                Color yesColor = new Color(172, 230, 0);
                txfCitizenInternalVaccinationStatus.setBackground(yesColor);
            } else {

                txfCitizenInternalVaccinationStatus.setText("NOT VACCINATED");
                Color noColor = new Color(255, 77, 77);
                txfCitizenInternalVaccinationStatus.setBackground(noColor);
            }
            lblInternalAge.setText("" + citizenArr[lstCitizen.getSelectedIndex()].getAge());
            lblCitizenHomeAddress.setText(currentCitizen.getHousehold().getStreetAddress());
            lblCitizenClosestCentre.setText(centreHandler.getClosestCentre(currentCitizen.getHousehold()).getName() + " (" + (int) getDistanceKilometres(currentCitizen.getHousehold().getCoordinates(), centreHandler.getClosestCentre(currentCitizen.getHousehold()).getCoordinates()) + "km)");
        } else {
            txfCitizenInternalContactNumber.setText("");
            txfCitizenInternalFirstName.setText("");
            txfCitizenInternalVaccinationStatus.setText("");
            lblInternalAge.setText("");
            lblPreviewRiskLevel.setText("");
            lblCitizenInternalSex.setText("");
        }


    }//GEN-LAST:event_lstCitizenValueChanged

    private void btnCitizenAddCitizenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCitizenAddCitizenMouseClicked
        // TODO add your handling code here:
        User currentUser = citizenHandler.getCurrentUser();
        if (currentUser.isIsAdmin()) {
            
            boolean bool = false;
            enableOutsideApp(bool);
            btnCitizenHousehold.setEnabled(bool);
            btnCitizenInfo.setEnabled(bool);
            lstCitizen.setEnabled(bool);
            btnLastLstCitizen.setEnabled(bool);
            btnFirstLstCitizen.setEnabled(bool);
            btnNextLstCitizen.setEnabled(bool);
            btnPreviousLstCitizen.setEnabled(bool);
            switchPanel(pnlCitizenAddCitizen, desktoppnlCitizen);
            
        } else {
            JOptionPane.showMessageDialog(this, "You are not authorised to perform this task");
        }
        
        

    }//GEN-LAST:event_btnCitizenAddCitizenMouseClicked

    private void btnCitizenHouseholdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCitizenHouseholdMouseClicked
        // TODO add your handling code here:
        switchPanel(pnlCitizenHousehold, desktoppnlCitizen);
    }//GEN-LAST:event_btnCitizenHouseholdMouseClicked

    private void btnCitizenInfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCitizenInfoMouseClicked
        // TODO add your handling code here:
        switchPanel(pnlCitizenAbout, desktoppnlCitizen);
    }//GEN-LAST:event_btnCitizenInfoMouseClicked

    private void btnCitizenNewCitizenCancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCitizenNewCitizenCancelMouseClicked
        // TODO add your handling code here:
        boolean bool = true;
        enableOutsideApp(bool);
        btnCitizenHousehold.setEnabled(bool);
        btnCitizenInfo.setEnabled(bool);
        lstCitizen.setEnabled(bool);
        btnLastLstCitizen.setEnabled(bool);
        btnFirstLstCitizen.setEnabled(bool);
        btnNextLstCitizen.setEnabled(bool);
        btnPreviousLstCitizen.setEnabled(bool);
        switchPanel(pnlCitizenAbout, desktoppnlCitizen);
        
        txfCitizenNewFirstName.setText("");
        txfCitizenNewLastName.setText("");
        txfCitizenNewPersonalId.setText("");
        txfCitizenNewContactNumber.setText("");
        sdrRiskLevel.setExtent(0);
        cmbHouseholdArr.setSelectedIndex(0);
    }//GEN-LAST:event_btnCitizenNewCitizenCancelMouseClicked

    private void btnCitizenNewCitizenConfirmMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCitizenNewCitizenConfirmMouseClicked
        // TODO add your handling code here:
        
        Household[] householdArr = householdHandler.getHouseholdArr();
        boolean isValid = true;
        String personalID = txfCitizenNewPersonalId.getText();
        String firstName = txfCitizenNewFirstName.getText();
        String lastName = txfCitizenNewLastName.getText();
        String isVaccinated = "false";
        String contactNumber = txfCitizenNewContactNumber.getText();
        Household household = householdArr[cmbHouseholdArr.getSelectedIndex()];
        int riskLevel = sdrRiskLevel.getValue();
        boolean error = false;
        String errorMessage = "Invalid Inputs:";
        
        if (!Citizen.validLuhnAlgorithm(personalID)){
            errorMessage += "\nInvalid ID number";
            error = true;
        }
        
        if (firstName.length()==0) {
            errorMessage += "\nFirst name cannot be empty";
            error = true;
        }
        
        if (lastName.length()==0) {
            errorMessage += "\nLast name cannot be empty";
            error = true;
        }
        try {
            Long.parseLong(contactNumber);
        } catch (NumberFormatException e) {
            error = true;
            errorMessage += "\nContact number needs to be numerical";
        }
        
        if (!error){
            Citizen[] citizenArr = citizenHandler.getCitizenArr();
            Citizen newCitizen = new Citizen(citizenHandler.getNextId(), personalID, firstName, lastName, isValid, contactNumber, riskLevel, household);
            
            Citizen[] newCitizenArr = new Citizen[citizenArr.length+1];
            for (int i = 0; i < citizenArr.length; i++) {
                newCitizenArr[i] = citizenArr[i];
            }
            newCitizenArr[citizenArr.length] = newCitizen;
            citizenHandler.setCitizenArr(newCitizenArr);
            citizenHandler.setNextId(citizenHandler.getNextId()+1);
            
            ExternalHandler.writeCitizensToFile(citizenHandler);
            
            int position = householdHandler.findHouseholdPos(household.getId());
            Household currentHousehold = householdArr[position];
            householdArr[position].setOccupants(currentHousehold.getOccupants() + 1);
            
            householdHandler.setHouseholdArr(householdArr);
            
            ExternalHandler.writeHouseholdsToFile(householdHandler);
            
            if (isValid == true) {
                enableOutsideApp(true);
            }
            refreshProgramme();
            txfCitizenNewContactNumber.setText("");
            txfCitizenNewFirstName.setText("");
            txfCitizenNewLastName.setText("");
            txfCitizenNewPersonalId.setText("");
            sdrRiskLevel.setExtent(1);
            JOptionPane.showMessageDialog(this, "Citizen "+ firstName + " " + lastName + " has successfully been added to the database");
            switchPanel(pnlCitizenAbout, desktoppnlCitizen);
            
            boolean bool = true;
            enableOutsideApp(bool);
            btnCitizenHousehold.setEnabled(bool);
            btnCitizenInfo.setEnabled(bool);
            lstCitizen.setEnabled(bool);
            btnLastLstCitizen.setEnabled(bool);
            btnFirstLstCitizen.setEnabled(bool);
            btnNextLstCitizen.setEnabled(bool);
            btnPreviousLstCitizen.setEnabled(bool);
            switchPanel(pnlCitizenAbout, desktoppnlCitizen);

            txfCitizenNewFirstName.setText("");
            txfCitizenNewLastName.setText("");
            txfCitizenNewPersonalId.setText("");
            txfCitizenNewContactNumber.setText("");
            sdrRiskLevel.setExtent(0);
            cmbHouseholdArr.setSelectedIndex(0);
            
        } else {
            int response = JOptionPane.showConfirmDialog(this, "One or more fields have invalid inputs:\n"+ errorMessage+"\nWould you like to try again?");
            if (response!=JOptionPane.YES_OPTION){
                boolean bool = true;
                enableOutsideApp(bool);
                btnCitizenHousehold.setEnabled(bool);
                btnCitizenInfo.setEnabled(bool);
                lstCitizen.setEnabled(bool);
                btnLastLstCitizen.setEnabled(bool);
                btnFirstLstCitizen.setEnabled(bool);
                btnNextLstCitizen.setEnabled(bool);
                btnPreviousLstCitizen.setEnabled(bool);
                switchPanel(pnlCitizenAbout, desktoppnlCitizen);
                
                btnCitizenNewCitizenCancel.setEnabled(true);

                txfCitizenNewFirstName.setText("");
                txfCitizenNewLastName.setText("");
                txfCitizenNewPersonalId.setText("");
                txfCitizenNewContactNumber.setText("");
                sdrRiskLevel.setExtent(1);
                cmbHouseholdArr.setSelectedIndex(0);
            }
        }
        
            
        
    }//GEN-LAST:event_btnCitizenNewCitizenConfirmMouseClicked

    private void cmbAddVaccinationBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAddVaccinationBrandActionPerformed
        // TODO add your handling code here:
        if (cmbAddVaccinationBrand.getSelectedIndex() != -1) {

        }

    }//GEN-LAST:event_cmbAddVaccinationBrandActionPerformed

    
    //!!!!!!!!!!!!!
    private void cmbAddVaccinationCentreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAddVaccinationCentreActionPerformed
        // TODO add your handling code here:
        if (cmbAddVaccinationCentre.getSelectedIndex() != -1) {
            
            Centre[] centreArr = centreHandler.getCentreArr();
            Brand[] brandArr = brandHandler.getBrandArr();
            Acquisition[] acquisitionArr = acquisitionHandler.getAcquisitionArr();
            int num = cmbAddVaccinationCentre.getSelectedIndex();
            Centre currentCentre = centreArr[cmbAddVaccinationCentre.getSelectedIndex()];
            int stockedNum = 0;
            for (int j = 0; j < brandArr.length; j++) {
                Brand currentBrand = brandArr[j];
                for (int i = 0; i < acquisitionArr.length; i++) {
                    if (acquisitionArr[i].getBrand().getId() == currentBrand.getId()) {
                        if (acquisitionArr[i].getCentre().getId() == currentCentre.getId()) {
                            stockedNum++;
                            break;
                        }
                    }

                }
            }
            stockedBrandArr = new Brand[0];
            stockedBrandArr = new Brand[stockedNum];
            stockedNum = 0;

            for (int j = 0; j < brandArr.length; j++) {
                Brand currentBrand = brandArr[j];
                for (int i = 0; i < acquisitionArr.length; i++) {
                    if (acquisitionArr[i].getBrand().getId() == currentBrand.getId()) {
                        if (acquisitionArr[i].getCentre().getId() == currentCentre.getId()) {
                            stockedBrandArr[stockedNum] = brandArr[j];
                            stockedNum++;
                            break;
                        }
                    }

                }
            }

            cmbAddVaccinationBrand.setModel(new DefaultComboBoxModel(stockedBrandArr));

        }
    }//GEN-LAST:event_cmbAddVaccinationCentreActionPerformed

    private void btnNewVaccinationVaccinateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNewVaccinationVaccinateMouseClicked
        // TODO add your handling code here:
        
        
        format.format(spnDate.getValue());
        String date = format.format(spnDate.getValue());
        Centre[] centreArr = centreHandler.getCentreArr();
        Citizen[] notVaccinatedCitizenArr = citizenHandler.getNotVaccinatedCitizenArr();
        Centre centre = centreArr[cmbAddVaccinationCentre.getSelectedIndex()];
        Citizen citizen = notVaccinatedCitizenArr[cmbAddVaccinationCitizen.getSelectedIndex()];
        Brand brand = stockedBrandArr[cmbAddVaccinationBrand.getSelectedIndex()];
        Brand[] brandArr = brandHandler.getBrandArr();
        Citizen[] citizenArr = citizenHandler.getCitizenArr();
        Vaccination[] vaccinationArr = vaccinationHandler.getVaccinationArr();
        
        Vaccination newVaccination = new Vaccination(vaccinationHandler.getNextId(), date, centre, citizen, brand);
        
        Vaccination[] newVaccinationArr = new Vaccination[vaccinationArr.length+1];
        for (int i = 0; i < vaccinationArr.length; i++) {
            newVaccinationArr[i] = vaccinationArr[i];
        }
        newVaccinationArr[vaccinationArr.length] = newVaccination;
        vaccinationHandler.setVaccinationArr(newVaccinationArr);
        vaccinationHandler.setNextId(vaccinationHandler.getNextId()+1);

        ExternalHandler.writeVaccinationsToFile(vaccinationHandler);
        
        int position = CitizenHandler.findCitizenPos(notVaccinatedCitizenArr[cmbAddVaccinationCitizen.getSelectedIndex()].getId(),citizenArr);
        citizenArr[position].setIsVaccinated(true);

        citizenHandler.setCitizenArr(citizenArr);
            
        ExternalHandler.writeCitizensToFile(citizenHandler);

        position = CentreHandler.findCentrePos(centre.getId(),centreArr);
        centreArr[position].setVaccinesAdministered(centreArr[position].getVaccinesAdministered()+1);

        centreHandler.setCentreArr(centreArr);
            
        ExternalHandler.writeCentreToFile(centreHandler);
        
        position = BrandHandler.findBrandPos(brand.getId(),brandArr);
        brandArr[position].setSupplyAdministered(brandArr[position].getSupplyAdministered()+1);

        brandHandler.setBrandArr(brandArr);
            
        ExternalHandler.writeBrandsToFile(brandHandler);

        refreshProgramme();
        lblPreviewName.setText(" ");
        lblPreviewID.setText(" ");
        lblPreviewAge.setText(" ");
        lblPreviewRiskLevel.setText(" ");
        lblPreviewBrandCommonName.setText(" ");
        lblPreviewBrandName.setText(" ");
        lblPreviewCentreDistance.setText(" ");
        lblPreviewCentreName.setText(" ");
        citizenArr = citizenHandler.getCitizenArr();
        JOptionPane.showMessageDialog(this, citizen.getFullName() + " has been vaccinated!");
        switchPanel(pnlNewVaccinationCitizen, desktoppnlNewVaccination);

    }//GEN-LAST:event_btnNewVaccinationVaccinateMouseClicked

    private void btnHelpPanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpPanelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnHelpPanelActionPerformed

    private void btnCitizenHouseholdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCitizenHouseholdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCitizenHouseholdActionPerformed

    private void btnUserManagementMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUserManagementMouseClicked
        switchPanel(pnlUserManagement, desktoppnlContainer);        // TODO add your handling code here:
    }//GEN-LAST:event_btnUserManagementMouseClicked

    private void btnSendMessageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSendMessageMouseClicked
        // TODO add your handling code here:
        User[] userArr = citizenHandler.getUserArr();
        User currentUser = citizenHandler.getCurrentUser();
        if (cmbMessageUser.getSelectedIndex() != -1 && (!"".equals(txfUserMessage.getText())) && (txfUserMessage.getText() != null)) {
            ExternalHandler.writeToUserMessages(userArr[cmbMessageUser.getSelectedIndex()].getUsername(), "[message from @" + userArr[CitizenHandler.findUserPos(currentUser.getId(),citizenHandler.getUserArr())].getUsername() + "] " + txfUserMessage.getText());
            txfUserMessage.setText("");
            JOptionPane.showMessageDialog(this, "Message delivered!");
        } else {
            JOptionPane.showMessageDialog(this, "Message cannot be empty or null");
        }
    }//GEN-LAST:event_btnSendMessageMouseClicked

    private void btnAddUserConfirmMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddUserConfirmMouseClicked
        // TODO add your handling code here:
        User currentUser = citizenHandler.getCurrentUser();
        User[] userArr = citizenHandler.getUserArr();
        if (currentUser.isIsAdmin()) {
            if (cmbNewUserCitizens.getSelectedIndex() != -1) {
                try {
                    Citizen[] citizenArr = citizenHandler.getCitizenArr();
                    Citizen citizen = citizenArr[cmbNewUserCitizens.getSelectedIndex()];
                    String userName = txfNewUsername.getText().toLowerCase();
                    boolean isAnAdmin = ckbxHasAdmin.isSelected();
                    String email = txfNewEmail.getText();

                    int userPos = -1;
                    boolean uniqueUsername = true;
                    for (int i = 0; i < userArr.length; i++) {
                        if (userArr[i].getId() == citizen.getId()) {
                            userPos = i;
                        }
                        if (userArr[i].getUsername().equals(userName)) {
                            uniqueUsername = false;
                        }
                    }
                    if (userPos == -1) {
                        if (uniqueUsername) {
                            User newUser  = new User(citizen, "", isAnAdmin, userName, email);
                            
                            User[] newUserArr = new User[userArr.length+1];
                            
                            for (int i = 0; i < userArr.length; i++) {
                                newUserArr[i] = userArr[i];
                            }
                            newUserArr[userArr.length] = newUser;
                            
                            citizenHandler.setUserArr(newUserArr);

                            ExternalHandler.writeUserToFile(citizenHandler);
                            
                            txfNewUsername.setText(" ");
                            lblEmail.setText(" ");
                            ckbxHasAdmin.setSelected(false);
                            
                            JOptionPane.showMessageDialog(this, "User @" + userName + " has been successfully added to database");
                            ExternalHandler.writeToUserMessages("" + currentUser.getUsername(), "Added a new user:");
                            ExternalHandler.writeToUserMessages("" + currentUser.getUsername(), "Username: @" + userName);
                            ExternalHandler.writeToUserMessages("" + currentUser.getUsername(), "(" + citizen.getFullName() + ")");
                            ExternalHandler.writeToUserMessages(userName + "", "Welcome to the WaveBreaker Team!");
                            ExternalHandler.writeToUserMessages(userName + "", "Please confirm that all the details in the About Me ");
                            ExternalHandler.writeToUserMessages(userName + "", "section is correct. If there are any issues or if you");
                            ExternalHandler.writeToUserMessages(userName + "", "require any help, feel free to contact our help email: ");
                            ExternalHandler.writeToUserMessages(userName+"", "thandi@gmail.com.");
                            ExternalHandler.writeToUserMessages(userName+"", "or "+currentUser.getUsername()+ " ("+ currentUser.getEmail()+"), ");
                            ExternalHandler.writeToUserMessages(userName+"", "the user who added you");
                            ExternalHandler.writeToUserMessages(userName+"",  "Thank you for joining the effort to vaccinate ");
                            ExternalHandler.writeToUserMessages(userName+"", "our beautiful city!");
                            citizenHandler = new CitizenHandler( householdHandler,userID);
                            ExternalHandler.readUserMessages(currentUser.getUsername());
                            cmbMessageUser.setModel(new DefaultComboBoxModel(userArr));
                            
                            switchPanel(pnlAboutUser, desktoppnlUser);
                        } else {
                            JOptionPane.showMessageDialog(this, "This username is taken. Choose a different one");
                            txfNewUsername.setText(" ");
                        }

                    } else {
                        JOptionPane.showMessageDialog(this, "This user already has a user profile: @" + userArr[userPos].getUsername());
                        txfNewUsername.setText("");
                        txfNewEmail.setText("");
                        ckbxHasAdmin.setSelected(false);
                    }

                } catch (Exception e) {
                    System.out.println("An Error Occurred");
                }
                refreshProgramme();
            }
        } else {
            JOptionPane.showMessageDialog(this, "You are not authorised to perform this task");
        }
    }//GEN-LAST:event_btnAddUserConfirmMouseClicked

    private void btnHouseholdNewPreviewDecCoordMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHouseholdNewPreviewDecCoordMouseClicked
        // TODO add your handling code here:
        double[] coordinates = getDecimalCoordinates((int) spnHouseholdNewLatDegrees.getValue(), (int) spnHouseholdNewLatMinutes.getValue(), (int) spnHouseholdNewLatSeconds.getValue(), (int) spnHouseholdNewLongDegrees.getValue(), (int) spnHouseholdNewLongMinutes.getValue(), (int) spnHouseholdNewLongSeconds.getValue());

        lblHouseholdPreviewCoordinates.setText("" + ((int) (coordinates[0] * 10000)) / 10000.0 + " S° " + ((int) (coordinates[1] * 10000)) / 10000.0 + " E° ");
    }//GEN-LAST:event_btnHouseholdNewPreviewDecCoordMouseClicked

    private void btnHouseholdNewConfirmMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHouseholdNewConfirmMouseClicked
        // TODO add your handling code here:
        if (!txfHouseholdNewAddress.getText().equals("")) {
            Household[] householdArr = householdHandler.getHouseholdArr();
            try {
                String streetAddress = txfHouseholdNewAddress.getText();
                double[] coordinatesArr = getDecimalCoordinates((int) spnHouseholdNewLatDegrees.getValue(), (int) spnHouseholdNewLatMinutes.getValue(), (int) spnHouseholdNewLatSeconds.getValue(), (int) spnHouseholdNewLongDegrees.getValue(), (int) spnHouseholdNewLongMinutes.getValue(), (int) spnHouseholdNewLongSeconds.getValue());
                double latitude = coordinatesArr[0] * -1.0;
                double longitude = coordinatesArr[1];
                String zipCode = txfHouseholdNewZipCode.getText();
                
                Household newHousehold  = new Household(householdHandler.getNextId(), 0, streetAddress, zipCode, latitude + "," + longitude);
                Household[] newHouseholdArr = new Household[householdArr.length+1];

                for (int i = 0; i < householdArr.length; i++) {
                    newHouseholdArr[i] = householdArr[i];
                }
                newHouseholdArr[householdArr.length] = newHousehold;

                householdHandler.setHouseholdArr(newHouseholdArr);
                householdHandler.setNextId(householdHandler.getNextId()+1);

                ExternalHandler.writeHouseholdsToFile(householdHandler);
                            
                JOptionPane.showMessageDialog(this, "Household " + streetAddress + " successfully added to database!");

                refreshProgramme();
                int num = 0;
                for (int i = 0; i < householdArr.length; i++) {
                    if (householdArr[i].getStreetAddress().equals(streetAddress)) {
                        num = i;
                        break;
                    }
                }
                switchPanel(pnlHouseholdAbout, desktoppnlHousehold);
                
                boolean bool = true;
                enableOutsideApp(bool);
                lstCentre.setEnabled(bool);
                btnCentreInternalVaccination.setEnabled(bool);
                btnCentreInternalMoreInfo.setEnabled(bool);
                btnLstCentreFirst.setEnabled(bool);
                btnLstCentreLast.setEnabled(bool);
                btnLstCentreNext.setEnabled(bool);
                btnLstCentrePrev.setEnabled(bool);

                txfCentreNewName.setText("");
                txfCentreNewAddress.setText("");
                txfCentreNewZipCode.setText("");
                lstHousehold.setSelectedValue(num, true);

            } catch (Exception e) {

            }
        } else {
            JOptionPane.showMessageDialog(this, "Address field cannot be empty");
        }
    }//GEN-LAST:event_btnHouseholdNewConfirmMouseClicked

    private void btnCentreNewConfirmMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCentreNewConfirmMouseClicked
        // TODO add your handling code here:
        User currentUser = citizenHandler.getCurrentUser();
        if (currentUser.isIsAdmin()) {
            try {
                String name = txfCentreNewName.getText();
                String address = txfCentreNewAddress.getText();
                double[] coordinatesArr = getDecimalCoordinates((int) spn1.getValue(), (int) spn2.getValue(), (int) spn3.getValue(), (int) spn4.getValue(), (int) spn5.getValue(), (int) spn6.getValue());
                double latitude = coordinatesArr[0] * -1.0;
                double longitude = coordinatesArr[1];
                String zipCode = txfCentreNewZipCode.getText();
                
                Centre[] centreArr = centreHandler.getCentreArr();
                
                Centre newCentre = new Centre(centreHandler.getNextId(), name, address, zipCode, latitude+","+longitude, 0 , 0);
                            
                Centre[] newCentreArr = new Centre[centreArr.length+1];

                for (int i = 0; i < centreArr.length; i++) {
                    newCentreArr[i] = centreArr[i];
                }
                newCentreArr[centreArr.length] = newCentre;

                centreHandler.setCentreArr(newCentreArr);
                centreHandler.setNextId(centreHandler.getNextId()+1);

                ExternalHandler.writeCentreToFile(centreHandler);

            } catch (Exception e) {

            }
            refreshProgramme();
            
            boolean bool = true;
            enableOutsideApp(bool);
            lstCentre.setEnabled(bool);
            btnCentreInternalVaccination.setEnabled(bool);
            btnCentreInternalMoreInfo.setEnabled(bool);
            btnLstCentreFirst.setEnabled(bool);
            btnLstCentreLast.setEnabled(bool);
            btnLstCentreNext.setEnabled(bool);
            btnLstCentrePrev.setEnabled(bool);

            txfCentreNewName.setText("");
            txfCentreNewAddress.setText("");
            txfCentreNewZipCode.setText("");

            switchPanel(pnlCentreInternalAbout, desktoppnlCentre);
            
            
        } else {
            JOptionPane.showMessageDialog(this, "You are not authorised to perform this task");
        }

    }//GEN-LAST:event_btnCentreNewConfirmMouseClicked

    private void btnCentreDosesDeliverMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCentreDosesDeliverMouseClicked
        // TODO add your handling code here:
        if (citizenHandler.getCurrentUser().isIsAdmin()){
            try {
                Centre[] centreArr = centreHandler.getCentreArr();
                Brand[] brandArr = brandHandler.getBrandArr();
                if (lstCentre.getSelectedIndex() != -1 && (int) spnCentreAcquistionsDoses.getValue() > 0) {
                    Centre centre = centreArr[lstCentre.getSelectedIndex()];
                    Brand brand = brandArr[cmbAcquisitionBrand.getSelectedIndex()];
                    int doses = (int) spnCentreAcquistionsDoses.getValue();
                    //System.out.println(brandArr[cmbAcquisitionBrand.getSelectedIndex()].getSupplyReceived()-brandArr[cmbAcquisitionBrand.getSelectedIndex()].getSupplyAdministered());
                    int available = acquisitionHandler.getNumVaccinesAvailable(brand.getId());

                    if (true) {
                        available = acquisitionHandler.getNumVaccinesAvailable(brand.getId());
                        //System.out.println(available);
                        if (available > 0 && doses < available) {
                            Acquisition[] acquisitionArr = acquisitionHandler.getAcquisitionArr();
                
                            Acquisition newAcquisition = new Acquisition(acquisitionHandler.getNextId(), doses, brand, centre);

                            Acquisition[] newAcquisitionArr = new Acquisition[acquisitionArr.length+1];

                            for (int i = 0; i < acquisitionArr.length; i++) {
                                newAcquisitionArr[i] = acquisitionArr[i];
                            }
                            newAcquisitionArr[acquisitionArr.length] = newAcquisition;

                            acquisitionHandler.setAcquisitionArr(newAcquisitionArr);
                            acquisitionHandler.setNextId(acquisitionHandler.getNextId()+1);

                            ExternalHandler.writeAcquisitionsToFile(acquisitionHandler);
                            
                            int position = CentreHandler.findCentrePos(centre.getId(),centreArr);
                            centreArr[position].setVaccinesReceived(centreArr[position].getVaccinesReceived()+doses);

                            centreHandler.setCentreArr(centreArr);

                            ExternalHandler.writeCentreToFile(centreHandler);

                            position = BrandHandler.findBrandPos(brand.getId(),brandArr);
                            brandArr[position].setSupplyReceived(brandArr[position].getSupplyReceived()+doses);

                            brandHandler.setBrandArr(brandArr);

                            ExternalHandler.writeBrandsToFile(brandHandler);


                        } else if (available == 0) {
                            JOptionPane.showMessageDialog(this, "Currently, the Cape Town Reserve has no vaccines of this brand left\nChoose a different brand");
                        } else {
                            JOptionPane.showMessageDialog(this, "There are only " + available + " vaccines of this brand left at the Cape Town Reserve\nEither request a lower dosage or choose a different brand");
                        }
                    }
                } else if ((int) spnCentreAcquistionsDoses.getValue() == 0) {
                    JOptionPane.showMessageDialog(this, "Doses must be more than 0");
                }

            } catch (Exception e) {

            }
            refreshProgramme();
        } else {
            JOptionPane.showMessageDialog(this, "You are not authorised to perform this task");
            cmbAcquisitionBrand.setSelectedIndex(0);
            spnCentreAcquistionsDoses.setValue(0);
        }
    }//GEN-LAST:event_btnCentreDosesDeliverMouseClicked

    private void btnUsersMessagesRefreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUsersMessagesRefreshMouseClicked
        // TODO add your handling code here:
        User currentUser = citizenHandler.getCurrentUser();
        try {
            txaUserInfoLog.setText("");
            BufferedReader reader = new BufferedReader(new FileReader("user_log.txt"));
            String line = reader.readLine();
            String[] messages = line.split("#");
            for (int i = 0; i < messages.length; i = i + 2) {
                if (messages[i].equals(currentUser.getUsername())) {
                    txaUserInfoLog.setText(txaUserInfoLog.getText() + messages[i + 1] + "\n");
                    System.out.println(currentUser.getUsername());
                }
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "The user log could not be read in this time");
        }


    }//GEN-LAST:event_btnUsersMessagesRefreshMouseClicked

    private void cmbAddVaccinationCitizenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAddVaccinationCitizenActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cmbAddVaccinationCitizenActionPerformed

    private void btnAddVaccinationBrandNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddVaccinationBrandNextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddVaccinationBrandNextActionPerformed

    private void btnAddVaccinationCitizenNextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddVaccinationCitizenNextMouseClicked
        // TODO add your handling code here:
        if (cmbAddVaccinationCitizen.getSelectedIndex() != -1) {
            Citizen[] notVaccinatedCitizenArr = citizenHandler.getNotVaccinatedCitizenArr();
            Citizen currentCitizen = notVaccinatedCitizenArr[cmbAddVaccinationCitizen.getSelectedIndex()];
            lblPreviewName.setText(currentCitizen.getFullName());
            lblPreviewID.setText(currentCitizen.getPersonalId());
            lblPreviewAge.setText(currentCitizen.getAge() + " years old");
            lblPreviewRiskLevel.setText(currentCitizen.getRiskLevelString());
            lblPreviewCentreDistance.setText(" ");
            lblPreviewCentreName.setText(" ");
            switchPanel(pnlNewVaccinationCentre, desktoppnlNewVaccination);
        }
    }//GEN-LAST:event_btnAddVaccinationCitizenNextMouseClicked

    private void btnAddVaccinationCentreBackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddVaccinationCentreBackMouseClicked
        // TODO add your handling code here:
        switchPanel(pnlNewVaccinationCitizen, desktoppnlNewVaccination);
        lblPreviewName.setText(" ");
        lblPreviewID.setText(" ");
        lblPreviewAge.setText(" ");
        lblPreviewRiskLevel.setText(" ");
        lblPreviewCentreDistance.setText(" ");
        lblPreviewCentreName.setText(" ");
    }//GEN-LAST:event_btnAddVaccinationCentreBackMouseClicked

    private void btnAddVaccinationCentreNextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddVaccinationCentreNextMouseClicked
        // TODO add your handling code here:
        if (cmbAddVaccinationCentre.getSelectedIndex() != -1) {
            Centre[] centreArr = centreHandler.getCentreArr();
            Centre currentCentre = centreArr[cmbAddVaccinationCentre.getSelectedIndex()];
            if (currentCentre.getAvailableVaccines() > 0) {
                Citizen[] citizenArr = citizenHandler.getCitizenArr();
                lblPreviewCentreDistance.setText((int) getDistanceKilometres(currentCentre.getCoordinates(), citizenArr[cmbAddVaccinationCitizen.getSelectedIndex()].getHousehold().getCoordinates()) + "km away from residence");
                lblPreviewCentreName.setText(currentCentre.getName());
                switchPanel(pnlNewVaccinationBrand, desktoppnlNewVaccination);
            } else {
                JOptionPane.showMessageDialog(this, currentCentre.getName() + " doesn't have vaccines left\nSelect a different centre");
            }
        }
    }//GEN-LAST:event_btnAddVaccinationCentreNextMouseClicked

    private void btnAddVaccinationBrandBackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddVaccinationBrandBackMouseClicked
        // TODO add your handling code here:
        switchPanel(pnlNewVaccinationCentre, desktoppnlNewVaccination);
        lblPreviewCentreDistance.setText(" ");
        lblPreviewCentreName.setText(" ");
        lblPreviewBrandCommonName.setText(" ");
        lblPreviewBrandName.setText(" ");
    }//GEN-LAST:event_btnAddVaccinationBrandBackMouseClicked

    private void btnAddVaccinationBackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddVaccinationBackMouseClicked
        // TODO add your handling code here:

        switchPanel(pnlNewVaccinationBrand, desktoppnlNewVaccination);
        lblPreviewBrandCommonName.setText(" ");
        lblPreviewBrandName.setText(" ");
    }//GEN-LAST:event_btnAddVaccinationBackMouseClicked

    private void btnAddVaccinationBrandNextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddVaccinationBrandNextMouseClicked
        // TODO add your handling code here:

        switchPanel(pnlConfirmation, desktoppnlNewVaccination);
        lblPreviewBrandCommonName.setText(stockedBrandArr[cmbAddVaccinationBrand.getSelectedIndex()].getCommonName());
        lblPreviewBrandName.setText(stockedBrandArr[cmbAddVaccinationBrand.getSelectedIndex()].getName());


    }//GEN-LAST:event_btnAddVaccinationBrandNextMouseClicked

    private void btnInfoBrandForwardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnInfoBrandForwardMouseClicked
        // TODO add your handling code here:
        int position = findBrandPos(currentBrandOnDisplayId);
        Brand[] brandArr = brandHandler.getBrandArr();
        if (position < brandArr.length - 1) {
            currentBrandOnDisplayId = brandArr[findBrandPos(currentBrandOnDisplayId) + 1].getId();
        } else {
            currentBrandOnDisplayId = brandArr[0].getId();
        }
        Brand currentBrand = brandArr[findBrandPos(currentBrandOnDisplayId)];
        txaBrandInfo.setText(currentBrand.getCommonName() + "\nCountry of Origin: " + currentBrand.getCountryOfOrigin() + "\nEfficacy Rate: " + currentBrand.getEfficacyRate() + "%");
    }//GEN-LAST:event_btnInfoBrandForwardMouseClicked

    private void btnInfoBrandBackwardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnInfoBrandBackwardMouseClicked
        // TODO add your handling code here:
        int position = findBrandPos(currentBrandOnDisplayId);
        Brand[] brandArr = brandHandler.getBrandArr();
        if (position > 0) {
            currentBrandOnDisplayId = brandArr[findBrandPos(currentBrandOnDisplayId) - 1].getId();
        } else {
            currentBrandOnDisplayId = brandArr[brandArr.length - 1].getId();
        }
        Brand currentBrand = brandArr[findBrandPos(currentBrandOnDisplayId)];
        txaBrandInfo.setText(currentBrand.getCommonName() + "\nCountry of Origin: " + currentBrand.getCountryOfOrigin() + "\nEfficacy Rate: " + currentBrand.getEfficacyRate() + "%");

    }//GEN-LAST:event_btnInfoBrandBackwardMouseClicked

    private void btnLastLstCitizenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLastLstCitizenMouseClicked
        // TODO add your handling code here:
        Citizen[] citizenArr = citizenHandler.getCitizenArr();
        if (citizenArr.length > 0) {
            lstCitizen.setSelectedValue(citizenArr[citizenArr.length - 1], true);
        }
    }//GEN-LAST:event_btnLastLstCitizenMouseClicked

    private void btnNextLstCitizenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNextLstCitizenMouseClicked
        // TODO add your handling code here:
        Citizen[] citizenArr = citizenHandler.getCitizenArr();
        if (citizenArr.length > 0) {
            int position = lstCitizen.getSelectedIndex();
            if (position != citizenArr.length - 1) {
                lstCitizen.setSelectedValue(citizenArr[position + 1], true);
            } else {
                lstCitizen.setSelectedValue(citizenArr[0], true);
            }
        }
    }//GEN-LAST:event_btnNextLstCitizenMouseClicked

    private void btnPreviousLstCitizenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPreviousLstCitizenMouseClicked
        // TODO add your handling code here:
        Citizen[] citizenArr = citizenHandler.getCitizenArr();
        if (citizenArr.length > 0) {
            int position = lstCitizen.getSelectedIndex();
            if (position != 0) {
                lstCitizen.setSelectedValue(citizenArr[position - 1], true);
            } else {
                lstCitizen.setSelectedValue(citizenArr[citizenArr.length - 1], true);
            }
        }
    }//GEN-LAST:event_btnPreviousLstCitizenMouseClicked

    private void btnFirstLstCitizenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnFirstLstCitizenMouseClicked
        // TODO add your handling code here:
        Citizen[] citizenArr = citizenHandler.getCitizenArr();
        if (citizenArr.length > 0) {
            lstCitizen.setSelectedValue(citizenArr[0], true);
        }


    }//GEN-LAST:event_btnFirstLstCitizenMouseClicked

    private void btnLstCentreFirstMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLstCentreFirstMouseClicked
        // TODO add your handling code here:
        Centre[] centreArr = centreHandler.getCentreArr();
        if (centreArr.length > 0) {
            lstCentre.setSelectedValue(centreArr[0], true);
        }
    }//GEN-LAST:event_btnLstCentreFirstMouseClicked

    private void btnLstCentrePrevMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLstCentrePrevMouseClicked
        // TODO add your handling code here:
        Centre[] centreArr = centreHandler.getCentreArr();
        if (centreArr.length > 0) {
            int position = lstCentre.getSelectedIndex();
            if (position > 0) {
                lstCentre.setSelectedValue(centreArr[position - 1], true);
            } else {
                lstCentre.setSelectedValue(centreArr[centreArr.length - 1], true);
            }
        }
    }//GEN-LAST:event_btnLstCentrePrevMouseClicked

    private void btnLstCentreLastMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLstCentreLastMouseClicked
        // TODO add your handling code here:
        Centre[] centreArr = centreHandler.getCentreArr();
        if (centreArr.length > 0) {
            lstCentre.setSelectedValue(centreArr[centreArr.length - 1], true);
        }
    }//GEN-LAST:event_btnLstCentreLastMouseClicked

    private void btnLstCentreNextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLstCentreNextMouseClicked
        // TODO add your handling code here:
        Centre[] centreArr = centreHandler.getCentreArr();
        if (centreArr.length > 0) {
            int position = lstCentre.getSelectedIndex();
            if (position != centreArr.length - 1) {
                lstCentre.setSelectedValue(centreArr[position + 1], true);
            } else {
                lstCentre.setSelectedValue(centreArr[0], true);
            }
        }
    }//GEN-LAST:event_btnLstCentreNextMouseClicked

    private void btnFirstLstHouseholdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnFirstLstHouseholdMouseClicked
        // TODO add your handling code here:
        Household[] householdArr = householdHandler.getHouseholdArr();
        if (householdArr.length > 0) {
            lstHousehold.setSelectedValue(householdArr[0], true);
        }
    }//GEN-LAST:event_btnFirstLstHouseholdMouseClicked

    private void btnLastLstHouseholdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLastLstHouseholdMouseClicked
        // TODO add your handling code here:
        Household[] householdArr = householdHandler.getHouseholdArr();
        if (householdArr.length > 0) {
            lstHousehold.setSelectedValue(householdArr[householdArr.length - 1], true);
        }
    }//GEN-LAST:event_btnLastLstHouseholdMouseClicked

    private void btnPreviousLstHouseholdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPreviousLstHouseholdMouseClicked
        // TODO add your handling code here:
        Household[] householdArr = householdHandler.getHouseholdArr();
        if (householdArr.length > 0) {
            int position = lstHousehold.getSelectedIndex();
            if (position != 0) {
                lstHousehold.setSelectedValue(householdArr[position - 1], true);
            } else {
                lstHousehold.setSelectedValue(householdArr[householdArr.length - 1], true);
            }
        }
    }//GEN-LAST:event_btnPreviousLstHouseholdMouseClicked

    private void btnNextLstHouseholdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNextLstHouseholdMouseClicked
        // TODO add your handling code here:
        Household[] householdArr = householdHandler.getHouseholdArr();
        if (householdArr.length > 0) {
            int position = lstHousehold.getSelectedIndex();
            if (position != householdArr.length - 1) {
                lstHousehold.setSelectedValue(householdArr[position + 1], true);
            } else {
                lstHousehold.setSelectedValue(householdArr[0], true);
            }
        }
    }//GEN-LAST:event_btnNextLstHouseholdMouseClicked

    private void btnVaccinationLogSelectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVaccinationLogSelectMouseClicked
        // TODO add your handling code here:
        Vaccination[] vaccinationArr = vaccinationHandler.getVaccinationArr();
        int position = tblVaccination.getSelectedRow();
        if (position < vaccinationArr.length) {
            Vaccination currentVaccination = vaccinationArr[position];
            JOptionPane.showMessageDialog(this, currentVaccination);
        }
    }//GEN-LAST:event_btnVaccinationLogSelectMouseClicked

    private void btnVaccinationLogForwardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVaccinationLogForwardMouseClicked
        // TODO add your handling code here:
        Vaccination[] vaccinationArr = vaccinationHandler.getVaccinationArr();
        int position = tblVaccination.getSelectedRow();
        if (position > 0) {
            tblVaccination.setRowSelectionInterval(position - 1, position - 1);
        } else {
            tblVaccination.setRowSelectionInterval(vaccinationArr.length - 1, vaccinationArr.length - 1);
        }
    }//GEN-LAST:event_btnVaccinationLogForwardMouseClicked

    private void btnVaccinationLogBackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVaccinationLogBackMouseClicked
        // TODO add your handling code here:
        Vaccination[] vaccinationArr = vaccinationHandler.getVaccinationArr();
        int position = tblVaccination.getSelectedRow();
        if (position < vaccinationArr.length - 1) {
            tblVaccination.setRowSelectionInterval(position + 1, position + 1);
        } else {
            tblVaccination.setRowSelectionInterval(0, 0);
        }
    }//GEN-LAST:event_btnVaccinationLogBackMouseClicked

    private void btnVaccinationLogCitizenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVaccinationLogCitizenMouseClicked
        // TODO add your handling code here:
        Vaccination[] vaccinationArr = vaccinationHandler.getVaccinationArr();
        int person = vaccinationArr[tblVaccination.getSelectedRow()].getId();
        vaccinationHandler.sortByCitizen(sortUp);
        sortUp = !sortUp;
        populateVaccinationTable();
        tblVaccination.setRowSelectionInterval(VaccinationHandler.findVaccinationPos(person,vaccinationArr), VaccinationHandler.findVaccinationPos(person,vaccinationArr));
    
        populateVaccinationTable();
        tblVaccination.setRowSelectionInterval(VaccinationHandler.findVaccinationPos(person,vaccinationArr), VaccinationHandler.findVaccinationPos(person,vaccinationArr));
    
    }//GEN-LAST:event_btnVaccinationLogCitizenMouseClicked

    private void btnVaccinationLogCentreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVaccinationLogCentreMouseClicked
        // TODO add your handling code here:
        Vaccination[] vaccinationArr = vaccinationHandler.getVaccinationArr();
        int person = vaccinationArr[tblVaccination.getSelectedRow()].getId();
        vaccinationHandler.sortByCentre(sortUp);
        sortUp = !sortUp;
        populateVaccinationTable();
        tblVaccination.setRowSelectionInterval(VaccinationHandler.findVaccinationPos(person,vaccinationArr), VaccinationHandler.findVaccinationPos(person,vaccinationArr));
    
    }//GEN-LAST:event_btnVaccinationLogCentreMouseClicked

    private void btnVaccinationLogDateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVaccinationLogDateMouseClicked
        // TODO add your handling code here:
        Vaccination[] vaccinationArr = vaccinationHandler.getVaccinationArr();
        int person = vaccinationArr[tblVaccination.getSelectedRow()].getId();
        vaccinationHandler.sortByDate(sortUp);
        sortUp = !sortUp;
        populateVaccinationTable();
        tblVaccination.setRowSelectionInterval(VaccinationHandler.findVaccinationPos(person,vaccinationArr), VaccinationHandler.findVaccinationPos(person,vaccinationArr));
    
        populateVaccinationTable();
        tblVaccination.setRowSelectionInterval(VaccinationHandler.findVaccinationPos(person,vaccinationArr), VaccinationHandler.findVaccinationPos(person,vaccinationArr));
    }//GEN-LAST:event_btnVaccinationLogDateMouseClicked

    private void btnVaccinationLogBrandMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVaccinationLogBrandMouseClicked
        // TODO add your handling code here:
        Vaccination[] vaccinationArr = vaccinationHandler.getVaccinationArr();
        int person = vaccinationArr[tblVaccination.getSelectedRow()].getId();
        vaccinationHandler.sortByBrand(sortUp);
        sortUp = !sortUp;
        populateVaccinationTable();
        tblVaccination.setRowSelectionInterval(VaccinationHandler.findVaccinationPos(person,vaccinationArr), VaccinationHandler.findVaccinationPos(person,vaccinationArr));
    
        populateVaccinationTable();
        tblVaccination.setRowSelectionInterval(VaccinationHandler.findVaccinationPos(person,vaccinationArr), VaccinationHandler.findVaccinationPos(person,vaccinationArr));
    
    }//GEN-LAST:event_btnVaccinationLogBrandMouseClicked

    private void lblLogoWavebreakerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLogoWavebreakerMouseClicked
        // TODO add your handling code here:
        switchPanel(pnlHomeScreen, desktoppnlContainer);
    }//GEN-LAST:event_lblLogoWavebreakerMouseClicked

    private void btnHouseholdNewConfirmMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHouseholdNewConfirmMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_btnHouseholdNewConfirmMouseEntered

    private void btnAddUserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddUserMouseClicked
        // TODO add your handling code here:
        switchPanel(pnlAddUser, desktoppnlUser);
        cmbNewUserCitizens.setSelectedIndex(0);
        txfNewEmail.setText("");
        txfNewUsername.setText("");
        ckbxHasAdmin.setSelected(false);
    }//GEN-LAST:event_btnAddUserMouseClicked

    private void cmbCitizenHouseholdMoveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbCitizenHouseholdMoveMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_cmbCitizenHouseholdMoveMouseClicked

    private void btnCitizenMoveConfirmMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCitizenMoveConfirmMouseClicked
        // TODO add your handling code here:
        if (citizenHandler.getCurrentUser().isIsAdmin()){
            Citizen[] citizenArr = citizenHandler.getCitizenArr();
            Household[] householdArr = householdHandler.getHouseholdArr();
            
            Citizen currentCitizen = citizenArr[lstCitizen.getSelectedIndex()];
            Household oldHousehold = currentCitizen.getHousehold();
            int response = JOptionPane.showConfirmDialog(this, "Are you sure you would like to move " + currentCitizen.getFullName() + "\nfrom " + currentCitizen.getHousehold().getStreetAddress() + "\nto " + householdArr[cmbCitizenHouseholdMove.getSelectedIndex()].getStreetAddress() + "?");
            if (response == JOptionPane.YES_OPTION) {
                Household newHousehold = householdArr[cmbCitizenHouseholdMove.getSelectedIndex()];
                try {
                    
                    int position = CitizenHandler.findCitizenPos(currentCitizen.getId(), citizenArr);
                    
                    citizenArr[position].setHousehold(newHousehold);

                    citizenHandler.setCitizenArr(citizenArr);

                    ExternalHandler.writeCitizensToFile(citizenHandler);

                    position = householdHandler.findHouseholdPos(newHousehold.getId());
                    Household currentHousehold = householdArr[position];
                    householdArr[position].setOccupants(currentHousehold.getOccupants() + 1);

                    householdHandler.setHouseholdArr(householdArr);
                    
                    position = householdHandler.findHouseholdPos(oldHousehold.getId());
                    householdArr[position].setOccupants(oldHousehold.getOccupants() - 1);

                    householdHandler.setHouseholdArr(householdArr);

                    ExternalHandler.writeHouseholdsToFile(householdHandler);

                    refreshProgramme();

                } catch (Exception e) {

                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "You are not authorised to perform this task");
            cmbCitizenHouseholdMove.setSelectedIndex(0);
        }

    }//GEN-LAST:event_btnCitizenMoveConfirmMouseClicked

    private void btnCentreUpdateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCentreUpdateMouseClicked
        // TODO add your handling code here:
        if (lstCentre.getSelectedIndex() != -1) {
            String changes = "Are you sure you would like to update this centre?\nProposed Changes: ";
            int changeCount = 0;
            Centre[] centreArr = centreHandler.getCentreArr();
            Centre currentCentre = centreArr[lstCentre.getSelectedIndex()];
            if (!txfCentreName.getText().equals(currentCentre.getName())) {
                changes += "\nName: " + currentCentre.getName() + " -> " + txfCentreName.getText();
                changeCount++;
            }
            if (!txfCentreAddress.getText().equals(currentCentre.getStreetAddress())) {
                changes += "\nStreet Address: " + currentCentre.getStreetAddress() + " -> " + txfCentreAddress.getText();
                changeCount++;
            }
            if (!txfCentreZipCode.getText().equals(currentCentre.getZipCode())) {
                changes += "\nZip Code: " + currentCentre.getZipCode() + " -> " + txfCentreZipCode.getText();
                changeCount++;
            }
            if (changeCount > 0) {
                int response = JOptionPane.showConfirmDialog(this, "Are you sure you would like to update this centre?");
                if (response == JOptionPane.YES_OPTION) {
                    try {
                        
                        String zipCode = txfCentreZipCode.getText();
                        String address = txfCentreAddress.getText();
                        String name = txfCentreName.getText();
                        
                        int position = CentreHandler.findCentrePos(currentCentre.getId(),centreArr);
                        centreArr[position].setZipCode(zipCode);
                        centreArr[position].setStreetAddress(address);
                        centreArr[position].setName(name);

                        centreHandler.setCentreArr(centreArr);

                        ExternalHandler.writeCentreToFile(centreHandler);
                        refreshProgramme();
                        
                        lstCentre.setSelectedIndex(CentreHandler.findCentrePos(currentCentre.getId(),centreArr));
                        
                        JOptionPane.showMessageDialog(this, "Doses successfully delivered!");
                       
                    } catch (Exception e){
                        JOptionPane.showMessageDialog(this, "There was a database error\nPlease try again later", "Database Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Change fields to update");
            }

        } else {
            JOptionPane.showMessageDialog(this, "Select a centre before trying to update");
        }
    }//GEN-LAST:event_btnCentreUpdateMouseClicked

    private void spnDateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_spnDateMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_spnDateMouseClicked

    private void spnDateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnDateStateChanged
          // TODO add your handling code here:
    }//GEN-LAST:event_spnDateStateChanged

    private void btnDosesReceivedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDosesReceivedMouseClicked
        // TODO add your handling code here:
        Brand[] brandArr = brandHandler.getBrandArr();
        Brand currentBrand = brandArr[cmbAcquisitionsCapeReserveBrands.getSelectedIndex()];
        int doses = (int)spnAcquisitionDoses.getValue();
        if (doses>0){
            int response = JOptionPane.showConfirmDialog(this, "By proceeding, you are asserting that there was a deliver of "+doses+" doses of "+currentBrand.getCommonName()+" vaccines to Cape Town Reserve");
            if (response == JOptionPane.YES_OPTION){
                try {
                    Acquisition[] acquisitionArr = acquisitionHandler.getAcquisitionArr();
                
                    Acquisition newAcquisition = new Acquisition(acquisitionHandler.getNextId(), doses, currentBrand, acquisitionHandler.getReserveCentre());

                    Acquisition[] newAcquisitionArr = new Acquisition[acquisitionArr.length+1];

                    for (int i = 0; i < acquisitionArr.length; i++) {
                        newAcquisitionArr[i] = acquisitionArr[i];
                    }
                    newAcquisitionArr[acquisitionArr.length] = newAcquisition;

                    acquisitionHandler.setAcquisitionArr(newAcquisitionArr);
                    acquisitionHandler.setNextId(acquisitionHandler.getNextId()+1);

                    refreshProgramme();
                    JOptionPane.showMessageDialog(this, "Doses successfully delivered!");
                } catch (Exception e){
                    JOptionPane.showMessageDialog(this, "There was a database error\nPlease try again later", "Database Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                currentBrand.getId();

            }
        } else {
            JOptionPane.showMessageDialog(this, "Please enter the doses received");
        }
    }//GEN-LAST:event_btnDosesReceivedMouseClicked

    private void btnUsersMessagesRefreshMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUsersMessagesRefreshMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_btnUsersMessagesRefreshMouseEntered

    private void btnAddUserCancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddUserCancelMouseClicked
        // TODO add your handling code here:
        switchPanel(pnlAboutUser, desktoppnlUser);
    }//GEN-LAST:event_btnAddUserCancelMouseClicked

    private void btnChangeUsernameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnChangeUsernameMouseClicked
        // TODO add your handling code here:
        User currentUser = citizenHandler.getCurrentUser();
        String password = JOptionPane.showInputDialog(this, currentUser.getFullName()+", please enter your current password:", "Change Password");
        boolean correctPassword = false;
        while (correctPassword == false){
            if (password.equals(currentUser.getPassword())){
                correctPassword = true;
            } else {
                correctPassword = false;
                int response = JOptionPane.showConfirmDialog(this, "The password you entered did not match password on file\nWould you like to try again?");
                if (response == JOptionPane.YES_OPTION){
                    password = JOptionPane.showInputDialog(this, currentUser.getFullName()+", please enter your current password:", "current_password");
                    if (password.equals(currentUser.getPassword())){
                        correctPassword = true;
                    } else {
                    }
                } else {
                    break;
                }
            }
        }
        if (correctPassword == true){
            String newPassword1 = JOptionPane.showInputDialog(this, "Enter new password:", "new_password");
            
            String newPassword2 = JOptionPane.showInputDialog(this, "Re-enter new password:", "new_password");
            boolean passwordsMatch = false;
            while (passwordsMatch == false){
                if (newPassword1.equals(newPassword2)){
                    User[] userArr = citizenHandler.getUserArr();
                    
                    int position = CitizenHandler.findUserPos(currentUser.getId(),userArr);
                    userArr[position].setPassword(newPassword1);

                    citizenHandler.setUserArr(userArr);

                    ExternalHandler.writeUserToFile(citizenHandler);
                    
                    JOptionPane.showMessageDialog(this, "Password successfully changed");
                    
                    ExternalHandler.writeToUserMessages(currentUser.getUsername(), "Password was changed");

                    refreshProgramme();
                    
                    passwordsMatch = true;

                    
                } else {
                    int response = JOptionPane.showConfirmDialog(this, "Passwords do not match\nWould you like to try again?");
                    if (response==JOptionPane.YES_OPTION){
                        newPassword1 = JOptionPane.showInputDialog(this, "Enter new password:", "Change Password");
                        newPassword2 = JOptionPane.showInputDialog(this,"Re-enter new password:","Change Password");
                    } else {
                        break;
                    }
                }
            }
        }

    }//GEN-LAST:event_btnChangeUsernameMouseClicked

    private void btnAddBrandMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddBrandMouseClicked
        // TODO add your handling code here:
        String commonName = JOptionPane.showInputDialog(this, "What is the common name of the vaccine brand?", "New Brand", JOptionPane.QUESTION_MESSAGE);
        while ("".equals(commonName) || commonName == null){
            int response = JOptionPane.showConfirmDialog(this, "Name cannot be empty\nWould you like to re-enter the common name of vaccine brand?");
            if (response==JOptionPane.YES_OPTION){
                commonName = JOptionPane.showInputDialog(this, "What is the common name of the vaccine brand?", "New Brand", JOptionPane.QUESTION_MESSAGE);
            } else {
                break;
            }
        } 
        if(!"".equals(commonName) && commonName != null) {
            String name = JOptionPane.showInputDialog(this, "What is the vaccine code of the vaccine brand?", "New Brand", JOptionPane.QUESTION_MESSAGE);
            while ("".equals(name)){
                int response = JOptionPane.showConfirmDialog(this, "Name cannot be empty\nWould you like to re-enter the common name of vaccine brand?");
                if (response==JOptionPane.YES_OPTION){
                    name = JOptionPane.showInputDialog(this, "What is the common name of the vaccine brand?", "New Brand", JOptionPane.QUESTION_MESSAGE);
                } else {
                    break;
                }
            }
            if (!"".equals(name) && name != null){
                String efficacyRate = JOptionPane.showInputDialog(this, "What is the efficacy rate?\nEnter only the percentage value i.e '64' / '32.45'");
                
                boolean valid = false;
                while (valid == false){
                    if (!"".equals(efficacyRate) && efficacyRate != null){
                        try {
                            Double.parseDouble(efficacyRate);
                            valid = true;
                        } catch (Exception e) {
                            efficacyRate = JOptionPane.showInputDialog(this, "The format of your number is incorrect. Please re-enter\nNote decimal point ('.') is used, not comma (',')\nPlease re-enter efficacy rate:");
                        }
                    } else {
                        int response = JOptionPane.showConfirmDialog(this, "Efficacy rate cannot be empty\nWould you like to re-enter the efficacy rate of the vaccine brand?");
                        if (response==JOptionPane.YES_OPTION){
                            efficacyRate = JOptionPane.showInputDialog(this, "What is the efficacy rate?\nEnter only the percentage value i.e '64' / '32.45'");
                        } else {
                            break;
                        }
                    }
                }
                if (valid==true){
                    String countryOfOrigin = JOptionPane.showInputDialog(this, "In which country was this vaccine originated?");
                    while ("".equals(countryOfOrigin) || countryOfOrigin == null){
                        int response = JOptionPane.showConfirmDialog(this, "Country cannot be empty\nWould you like to re-enter the efficacy rate of the vaccine brand?");
                        if (response==JOptionPane.YES_OPTION){
                            countryOfOrigin = JOptionPane.showInputDialog(this, "In which country was this vaccine originated?");
                        } else {
                            break;
                        }
                    } 
                    if (!"".equals(countryOfOrigin) && countryOfOrigin != null){
                        try {
                            Brand[] brandArr = brandHandler.getBrandArr();
                            Brand newBrand = new Brand(userID, name, commonName, Integer.parseInt(efficacyRate), countryOfOrigin,0,0);
        
                            Brand[] newBrandArr = new Brand[brandArr.length+1];
                            for (int i = 0; i < brandArr.length; i++) {
                                newBrandArr[i] = brandArr[i];
                            }
                            newBrandArr[brandArr.length] = newBrand;
                            brandHandler.setBrandArr(newBrandArr);
                            brandHandler.setNextId(brandHandler.getNextId()+1);

                            ExternalHandler.writeBrandsToFile(brandHandler);
                            

                            refreshProgramme();
                            JOptionPane.showMessageDialog(this, "Brand successfully added to database!");
                            
                        } catch (Exception e){
                           JOptionPane.showMessageDialog(this, "A database issue has occurred. \nPlease try again later","Database Error",JOptionPane.ERROR_MESSAGE);
                        }
                        
                    }
                }
            }
        }
    }//GEN-LAST:event_btnAddBrandMouseClicked

    private void btnUpdateCitizenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUpdateCitizenMouseClicked
        // TODO add your handling code here:
        String changes = "";
        int position = lstCitizen.getSelectedIndex();
        Citizen[] citizenArr = citizenHandler.getCitizenArr();
        Citizen currentCitizen = citizenArr[position];
        if (!txfCitizenInternalFirstName.getText().equals(currentCitizen.getFirstName())){
            changes+= "\nFirst Name:\n"+currentCitizen.getFirstName() + " to " + txfCitizenInternalFirstName.getText();
        }
        if (!txfCitizenInternalLastName.getText().equals(currentCitizen.getLastName())){
            changes+= "\nLast Name:\n"+currentCitizen.getLastName() + " to " + txfCitizenInternalLastName.getText();
        }
        if (!txfCitizenInternalContactNumber.getText().equals(currentCitizen.getContactNumber())){
            changes+= "\nContact Number:\n"+currentCitizen.getContactNumber()+ " to " + txfCitizenInternalContactNumber.getText();
        
        }
        if (changes.length()>0){
            int response = JOptionPane.showConfirmDialog(this, "Are you sure you would like to make the following changes?"+changes);
            if (response == JOptionPane.YES_OPTION){
                try {
                    
                    String zipCode = txfCentreZipCode.getText();
                    String address = txfCentreAddress.getText();
                    String name = txfCentreName.getText();

                    position = CitizenHandler.findCitizenPos(currentCitizen.getId(),citizenArr);
                    citizenArr[position].setFirstName(txfCitizenInternalFirstName.getText());
                    citizenArr[position].setLastName(txfCitizenInternalLastName.getText());
                    citizenArr[position].setContactNumber(txfCitizenInternalContactNumber.getText());

                    citizenHandler.setCitizenArr(citizenArr);

                    ExternalHandler.writeCitizensToFile(citizenHandler);
                    
                    refreshProgramme();
                    lstCitizen.setSelectedIndex(CitizenHandler.findCitizenPos(currentCitizen.getId(),citizenArr));
                    JOptionPane.showMessageDialog(this, "The relevant changes have been made!");
                    
                } catch (Exception e){
                    JOptionPane.showMessageDialog(this, "The relevant changes could not be made due a database error", "Error", JOptionPane.ERROR_MESSAGE);
                }
                
            } else {
                txfCitizenInternalFirstName.setText(currentCitizen.getFirstName());
                txfCitizenInternalLastName.setText(currentCitizen.getLastName());
                txfCitizenInternalContactNumber.setText(currentCitizen.getContactNumber());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please make changes in order to update");
        }
    }//GEN-LAST:event_btnUpdateCitizenMouseClicked

    private void btnOpenGuideMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnOpenGuideMouseClicked
        // TODO add your handling code here:
        ExternalHandler.openUserGuide();
    }//GEN-LAST:event_btnOpenGuideMouseClicked

    private void btnNewCentreCancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNewCentreCancelMouseClicked
        // TODO add your handling code here:
        
        boolean bool = true;
        enableOutsideApp(bool);
        lstCentre.setEnabled(bool);
        btnCentreInternalVaccination.setEnabled(bool);
        btnCentreInternalMoreInfo.setEnabled(bool);
        btnLstCentreFirst.setEnabled(bool);
        btnLstCentreLast.setEnabled(bool);
        btnLstCentreNext.setEnabled(bool);
        btnLstCentrePrev.setEnabled(bool);
        
        txfCentreNewName.setText("");
        txfCentreNewAddress.setText("");
        txfCentreNewZipCode.setText("");
        
        switchPanel(pnlCentreInternalAbout, desktoppnlCentre);
    }//GEN-LAST:event_btnNewCentreCancelMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new MainFrame().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAcquisitionsPanel;
    private javax.swing.JButton btnAddBrand;
    private javax.swing.JButton btnAddUser;
    private javax.swing.JButton btnAddUserCancel;
    private javax.swing.JButton btnAddUserConfirm;
    private javax.swing.JButton btnAddVaccinationBack;
    private javax.swing.JButton btnAddVaccinationBrandBack;
    private javax.swing.JButton btnAddVaccinationBrandNext;
    private javax.swing.JButton btnAddVaccinationCentreBack;
    private javax.swing.JButton btnAddVaccinationCentreNext;
    private javax.swing.JButton btnAddVaccinationCitizenNext;
    private javax.swing.JButton btnCentreDetails;
    private javax.swing.JButton btnCentreDosesDeliver;
    private javax.swing.JButton btnCentreInternalMoreInfo;
    private javax.swing.JButton btnCentreInternalNewCentre;
    private javax.swing.JButton btnCentreInternalVaccination;
    private javax.swing.JButton btnCentreNewConfirm;
    private javax.swing.JButton btnCentrePanel;
    private javax.swing.JButton btnCentreUpdate;
    private javax.swing.JButton btnChangeUsername;
    private javax.swing.JButton btnCitizenAddCitizen;
    private javax.swing.JButton btnCitizenHousehold;
    private javax.swing.JButton btnCitizenInfo;
    private javax.swing.JButton btnCitizenMoveConfirm;
    private javax.swing.JButton btnCitizenNewCitizenCancel;
    private javax.swing.JButton btnCitizenNewCitizenConfirm;
    private javax.swing.JButton btnCitizenNewHelp;
    private javax.swing.JButton btnCitizenPanel;
    private javax.swing.JButton btnDeleteCentre;
    private javax.swing.JButton btnDosesReceived;
    private javax.swing.JButton btnFirstLstCitizen;
    private javax.swing.JButton btnFirstLstHousehold;
    private javax.swing.JButton btnHelpPanel;
    private javax.swing.JButton btnHouseholdAbout;
    private javax.swing.JButton btnHouseholdDirectionsToCentre;
    private javax.swing.JButton btnHouseholdGoogleMaps;
    private javax.swing.JButton btnHouseholdNewCancel;
    private javax.swing.JButton btnHouseholdNewConfirm;
    private javax.swing.JButton btnHouseholdNewHousehold;
    private javax.swing.JButton btnHouseholdNewPreviewDecCoord;
    private javax.swing.JButton btnHouseholdOccupants;
    private javax.swing.JButton btnHouseholdPanel;
    private javax.swing.JButton btnInfoBrandBackward;
    private javax.swing.JButton btnInfoBrandForward;
    private javax.swing.JButton btnLastLstCitizen;
    private javax.swing.JButton btnLastLstHousehold;
    private javax.swing.JButton btnLstCentreFirst;
    private javax.swing.JButton btnLstCentreLast;
    private javax.swing.JButton btnLstCentreNext;
    private javax.swing.JButton btnLstCentrePrev;
    private javax.swing.JButton btnNewCentreCancel;
    private javax.swing.JButton btnNewVaccinationPanel;
    private javax.swing.JButton btnNewVaccinationVaccinate;
    private javax.swing.JButton btnNextLstCitizen;
    private javax.swing.JButton btnNextLstHousehold;
    private javax.swing.JButton btnOpenGuide;
    private javax.swing.JButton btnOurProgressPanel;
    private javax.swing.JButton btnPreviousLstCitizen;
    private javax.swing.JButton btnPreviousLstHousehold;
    private javax.swing.JButton btnSendMessage;
    private javax.swing.JButton btnUpdateCitizen;
    private javax.swing.JButton btnUserManagement;
    private javax.swing.JButton btnUsersMessagesRefresh;
    private javax.swing.JButton btnVaccinationLogBack;
    private javax.swing.JButton btnVaccinationLogBrand;
    private javax.swing.JButton btnVaccinationLogCentre;
    private javax.swing.JButton btnVaccinationLogCitizen;
    private javax.swing.JButton btnVaccinationLogDate;
    private javax.swing.JButton btnVaccinationLogForward;
    private javax.swing.JButton btnVaccinationLogSelect;
    private javax.swing.JButton btnVaccinationPanel;
    private javax.swing.JCheckBox ckbxHasAdmin;
    private javax.swing.JComboBox<Brand> cmbAcquisitionBrand;
    private javax.swing.JComboBox<String> cmbAcquisitionsCapeReserveBrands;
    private javax.swing.JComboBox<Brand> cmbAddVaccinationBrand;
    private javax.swing.JComboBox<Centre> cmbAddVaccinationCentre;
    private javax.swing.JComboBox<Citizen> cmbAddVaccinationCitizen;
    private javax.swing.JComboBox<String> cmbCitizenHouseholdMove;
    private javax.swing.JComboBox<Household> cmbHouseholdArr;
    private javax.swing.JComboBox<String> cmbMessageUser;
    private javax.swing.JComboBox<Citizen> cmbNewUserCitizens;
    private javax.swing.JDesktopPane desktoppnlCentre;
    private javax.swing.JDesktopPane desktoppnlCitizen;
    private javax.swing.JDesktopPane desktoppnlContainer;
    private javax.swing.JDesktopPane desktoppnlHousehold;
    private javax.swing.JDesktopPane desktoppnlNewVaccination;
    private javax.swing.JDesktopPane desktoppnlUser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JLabel lblAccessLevel;
    private javax.swing.JLabel lblAddUserCitizenProfile;
    private javax.swing.JLabel lblAddUserHeader;
    private javax.swing.JLabel lblAddUserName;
    private javax.swing.JLabel lblAddVaccinationBrandConfirmHeader;
    private javax.swing.JLabel lblAddVaccinationBrandHeader;
    private javax.swing.JLabel lblAddVaccinationBrandInstruct;
    private javax.swing.JLabel lblAddVaccinationCentreConfirmHeader;
    private javax.swing.JLabel lblAddVaccinationCentreHeader;
    private javax.swing.JLabel lblAddVaccinationCentreInstruct;
    private javax.swing.JLabel lblAddVaccinationCitizenConfirmHeader;
    private javax.swing.JLabel lblAddVaccinationCitizenHeader;
    private javax.swing.JLabel lblAddVaccinationCitizenInstruct1;
    private javax.swing.JLabel lblAddVaccinationCitizenInstruct2;
    private javax.swing.JLabel lblAddVaccinationConfirmHeader;
    private javax.swing.JLabel lblAddVaccinationDate;
    private javax.swing.JLabel lblAddVaccinationDateConfirmHeader;
    private javax.swing.JLabel lblAddVaccinationHeader;
    private javax.swing.JLabel lblAddVaccinationInstruct1;
    private javax.swing.JLabel lblAddVaccinationInstruct2;
    private javax.swing.JLabel lblAddVaccinationInstruct3;
    private javax.swing.JLabel lblAddVaccinationInstruct4;
    private javax.swing.JLabel lblAddVaccinationInstruct5;
    private javax.swing.JLabel lblAddVaccinationInstructHeader;
    private javax.swing.JLabel lblAddingUserCaution;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblAppNameApplication;
    private javax.swing.JLabel lblAppNameBreaker;
    private javax.swing.JLabel lblAppNameWave;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JLabel lblCapeTownAddress;
    private javax.swing.JLabel lblCapeTownAddressHeader;
    private javax.swing.JLabel lblCapeTownImage;
    private javax.swing.JLabel lblCapeTownNameHeader;
    private javax.swing.JLabel lblCapeTownNameTranslate;
    private javax.swing.JLabel lblCapeTownReserve;
    private javax.swing.JLabel lblCapeTownZipCode;
    private javax.swing.JLabel lblCentreAddress;
    private javax.swing.JLabel lblCentreBrandDeliver;
    private javax.swing.JLabel lblCentreCoordina;
    private javax.swing.JLabel lblCentreCoordinates;
    private javax.swing.JLabel lblCentreDeliverHeader;
    private javax.swing.JLabel lblCentreDoses;
    private javax.swing.JLabel lblCentreGenInfo;
    private javax.swing.JLabel lblCentreHeader;
    private javax.swing.JLabel lblCentreName;
    private javax.swing.JLabel lblCentreNewLatDegree;
    private javax.swing.JLabel lblCentreNewLatMin;
    private javax.swing.JLabel lblCentreNewLatSec;
    private javax.swing.JLabel lblCentreNewLongDegree;
    private javax.swing.JLabel lblCentreNewLongMin;
    private javax.swing.JLabel lblCentreNewLongSec;
    private javax.swing.JLabel lblCentreNewLongitude;
    private javax.swing.JLabel lblCentreNumVaccine;
    private javax.swing.JLabel lblCentreNumVaccines;
    private javax.swing.JLabel lblCitizenAge;
    private javax.swing.JLabel lblCitizenCitizenship;
    private javax.swing.JLabel lblCitizenClosestCentre;
    private javax.swing.JLabel lblCitizenContactNumber;
    private javax.swing.JLabel lblCitizenFirstName;
    private javax.swing.JLabel lblCitizenGeneralInfo;
    private javax.swing.JLabel lblCitizenHeader;
    private javax.swing.JLabel lblCitizenHomeAddress;
    private javax.swing.JLabel lblCitizenHouseholdAddressHeader;
    private javax.swing.JLabel lblCitizenHouseholdCentreHeader;
    private javax.swing.JLabel lblCitizenHouseholdMove;
    private javax.swing.JLabel lblCitizenInternalRiskLevel;
    private javax.swing.JLabel lblCitizenInternalSACitizen;
    private javax.swing.JLabel lblCitizenInternalSex;
    private javax.swing.JLabel lblCitizenLastName;
    private javax.swing.JLabel lblCitizenRiskLevel;
    private javax.swing.JLabel lblCitizenSex;
    private javax.swing.JLabel lblCitizenStatus;
    private javax.swing.JLabel lblCitizenYearsOld;
    private javax.swing.JLabel lblClosestCentre;
    private javax.swing.JLabel lblCoordinates;
    private javax.swing.JLabel lblDeliveriesHeader;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblHouseholdAddress;
    private javax.swing.JLabel lblHouseholdClosestCentre;
    private javax.swing.JLabel lblHouseholdCoordinates;
    private javax.swing.JLabel lblHouseholdGoogleMaps;
    private javax.swing.JLabel lblHouseholdNewAddress;
    private javax.swing.JLabel lblHouseholdNewHeader;
    private javax.swing.JLabel lblHouseholdNewLat;
    private javax.swing.JLabel lblHouseholdNewLatDegree;
    private javax.swing.JLabel lblHouseholdNewLatNegSign;
    private javax.swing.JLabel lblHouseholdNewLatSec;
    private javax.swing.JLabel lblHouseholdNewLatitude;
    private javax.swing.JLabel lblHouseholdNewLongDeg;
    private javax.swing.JLabel lblHouseholdNewLongDegree;
    private javax.swing.JLabel lblHouseholdNewLongMin;
    private javax.swing.JLabel lblHouseholdNewLongSec;
    private javax.swing.JLabel lblHouseholdNewZip;
    private javax.swing.JLabel lblHouseholdOccupantAvgAge;
    private javax.swing.JLabel lblHouseholdOccupantInfoHeader;
    private javax.swing.JLabel lblHouseholdOccupantRiskLevel1;
    private javax.swing.JLabel lblHouseholdOccupantRiskLevel2;
    private javax.swing.JLabel lblHouseholdOccupantRiskLevel3;
    private javax.swing.JLabel lblHouseholdOccupantRiskLevel4;
    private javax.swing.JLabel lblHouseholdOccupantVaccinated;
    private javax.swing.JLabel lblHouseholdOccupantYearAge;
    private javax.swing.JLabel lblHouseholdOccupants;
    private javax.swing.JLabel lblHouseholdPnlHeading;
    private javax.swing.JLabel lblHouseholdPreviewCoordinates;
    private javax.swing.JLabel lblHouseholdZipCode;
    private javax.swing.JLabel lblHouseholdgenInfoHeader;
    private javax.swing.JLabel lblInfoVaccineCentres;
    private javax.swing.JLabel lblInfoVaccinesAdministered;
    private javax.swing.JLabel lblInternalAge;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblLogoApplication;
    private javax.swing.JLabel lblLogoWavebreaker;
    private javax.swing.JLabel lblMessageUser;
    private javax.swing.JLabel lblMessagingPortalHeader;
    private javax.swing.JLabel lblMinusSign;
    private javax.swing.JLabel lblNewCentre;
    private javax.swing.JLabel lblNewCentreAddress;
    private javax.swing.JLabel lblNewCentreLatitude;
    private javax.swing.JLabel lblNewCentreName;
    private javax.swing.JLabel lblNewCentreZipCode;
    private javax.swing.JLabel lblNewCitizenAddress;
    private javax.swing.JLabel lblNewCitizenContactNumber;
    private javax.swing.JLabel lblNewCitizenFirstName;
    private javax.swing.JLabel lblNewCitizenHeader;
    private javax.swing.JLabel lblNewCitizenIDNumber;
    private javax.swing.JLabel lblNewCitizenLastName;
    private javax.swing.JLabel lblNewCitizenRiskLevel;
    private javax.swing.JLabel lblNumOccupants;
    private javax.swing.JLabel lblNumberOfOccupants;
    private javax.swing.JLabel lblOpenUserGuide;
    private javax.swing.JLabel lblPortalHeader;
    private javax.swing.JLabel lblPreviewAge;
    private javax.swing.JLabel lblPreviewBrandCommonName;
    private javax.swing.JLabel lblPreviewBrandName;
    private javax.swing.JLabel lblPreviewCentreDistance;
    private javax.swing.JLabel lblPreviewCentreName;
    private javax.swing.JLabel lblPreviewID;
    private javax.swing.JLabel lblPreviewName;
    private javax.swing.JLabel lblPreviewRiskLevel;
    private javax.swing.JLabel lblRecentVaccinationHeader;
    private javax.swing.JLabel lblRegCitizens;
    private javax.swing.JLabel lblRegisteredCitizens;
    private javax.swing.JLabel lblShipmentDoses;
    private javax.swing.JLabel lblShipmentHeader;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTotalOfBrand;
    private javax.swing.JLabel lblTotalRemainingOfBrand;
    private javax.swing.JLabel lblTotalVaccinesUnaddressed;
    private javax.swing.JLabel lblUserAccessLevel;
    private javax.swing.JLabel lblUserEmail;
    private javax.swing.JLabel lblUserHomeAddress;
    private javax.swing.JLabel lblUserInfoHeader;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JLabel lblUserOwnName;
    private javax.swing.JLabel lblUserUsername;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JLabel lblVaccAdministered;
    private javax.swing.JLabel lblVaccCentre;
    private javax.swing.JLabel lblVaccinationLogHeader;
    private javax.swing.JLabel lblVaccinationSortBy;
    private javax.swing.JLabel lblVaccineBrandHeader;
    private javax.swing.JLabel lblWhereWeVaccinateHeader;
    private javax.swing.JLabel lblYourInbox;
    private javax.swing.JLabel lblwelcome;
    private javax.swing.JList<Brand> lstBrand;
    private javax.swing.JList<Centre> lstCentre;
    private javax.swing.JList<Citizen> lstCitizen;
    private javax.swing.JList<Household> lstHousehold;
    private javax.swing.JPanel pnlAboutUser;
    private javax.swing.JPanel pnlAcquisition;
    private javax.swing.JPanel pnlAddUser;
    private javax.swing.JPanel pnlAddVaccination;
    private javax.swing.JPanel pnlAppHomeBackground;
    private javax.swing.JPanel pnlBrandInfo;
    private javax.swing.JPanel pnlButtonContainer;
    private javax.swing.JPanel pnlCapeTownInfo;
    private javax.swing.JPanel pnlCentre;
    private javax.swing.JPanel pnlCentreDeliver;
    private javax.swing.JPanel pnlCentreInternalAbout;
    private javax.swing.JPanel pnlCentreInternalNewCentre;
    private javax.swing.JPanel pnlCentreInternalRecentVaccination;
    private javax.swing.JPanel pnlCitizen;
    private javax.swing.JPanel pnlCitizenAbout;
    private javax.swing.JPanel pnlCitizenAddCitizen;
    private javax.swing.JPanel pnlCitizenHousehold;
    private javax.swing.JPanel pnlConfirmation;
    private javax.swing.JPanel pnlHelp;
    private javax.swing.JPanel pnlHome;
    private javax.swing.JPanel pnlHomeScreen;
    private javax.swing.JPanel pnlHousehold;
    private javax.swing.JPanel pnlHouseholdAbout;
    private javax.swing.JPanel pnlHouseholdNewHousehold;
    private javax.swing.JPanel pnlHouseholdOccupants;
    private javax.swing.JPanel pnlNewVaccinationBrand;
    private javax.swing.JPanel pnlNewVaccinationCentre;
    private javax.swing.JPanel pnlNewVaccinationCitizen;
    private javax.swing.JPanel pnlOurProgress;
    private javax.swing.JPanel pnlShipment;
    private javax.swing.JPanel pnlUserManagement;
    private javax.swing.JPanel pnlVaccinationDetails;
    private javax.swing.JPanel pnlVaccinationLog;
    private javax.swing.JScrollPane scrlpaneTblAcquisitions;
    private javax.swing.JScrollPane scrlpneBrandInfo;
    private javax.swing.JScrollPane scrlpneBrandList;
    private javax.swing.JScrollPane scrlpneCapeTownInfo;
    private javax.swing.JScrollPane scrlpneLstCentre;
    private javax.swing.JScrollPane scrlpneLstCitizen;
    private javax.swing.JScrollPane scrlpneLstHousehold;
    private javax.swing.JScrollPane scrlpneRecentVaccination;
    private javax.swing.JScrollPane scrlpneTblOccupants;
    private javax.swing.JScrollPane scrlpneTblVaccinationTable;
    private javax.swing.JScrollPane scrlpneTblZipVaccination;
    private javax.swing.JScrollPane scrlpneUserMessages;
    private javax.swing.JSlider sdrRiskLevel;
    private javax.swing.JSpinner spn1;
    private javax.swing.JSpinner spn2;
    private javax.swing.JSpinner spn3;
    private javax.swing.JSpinner spn4;
    private javax.swing.JSpinner spn5;
    private javax.swing.JSpinner spn6;
    private javax.swing.JSpinner spnAcquisitionDoses;
    private javax.swing.JSpinner spnCentreAcquistionsDoses;
    private javax.swing.JSpinner spnDate;
    private javax.swing.JSpinner spnHouseholdNewLatDegrees;
    private javax.swing.JSpinner spnHouseholdNewLatMinutes;
    private javax.swing.JSpinner spnHouseholdNewLatSeconds;
    private javax.swing.JSpinner spnHouseholdNewLongDegrees;
    private javax.swing.JSpinner spnHouseholdNewLongMinutes;
    private javax.swing.JSpinner spnHouseholdNewLongSeconds;
    private javax.swing.JSeparator sptrAcquisitionsFromDeliveries;
    private javax.swing.JSeparator sptrAddUser;
    private javax.swing.JSeparator sptrBottom;
    private javax.swing.JSeparator sptrBottomLogo;
    private javax.swing.JSeparator sptrButton1;
    private javax.swing.JSeparator sptrCitizenHouseholdMove;
    private javax.swing.JSeparator sptrHouseholdGenInfo;
    private javax.swing.JSeparator sptrMessagesfromSend;
    private javax.swing.JSeparator sptrTopLogo;
    private javax.swing.JSeparator sptrTotalBrandfromReserve;
    private javax.swing.JSeparator sptrVaccinationHeaderfromButton;
    private javax.swing.JTable tblAboutVaccinations;
    private javax.swing.JTable tblCentreVaccines;
    private javax.swing.JTable tblHouseholdInternalOccupants;
    private javax.swing.JTable tblVaccination;
    private javax.swing.JTextArea txaBrandInfo;
    private javax.swing.JTextArea txaCapeTownInfo;
    private javax.swing.JTextArea txaRecentVaccinations;
    private javax.swing.JTextArea txaUserInfoLog;
    private javax.swing.JTextField txfCentreAddress;
    private javax.swing.JTextField txfCentreName;
    private javax.swing.JTextField txfCentreNewAddress;
    private javax.swing.JTextField txfCentreNewName;
    private javax.swing.JTextField txfCentreNewZipCode;
    private javax.swing.JTextField txfCentreZipCode;
    private javax.swing.JTextField txfCitizenInternalContactNumber;
    private javax.swing.JTextField txfCitizenInternalFirstName;
    private javax.swing.JTextField txfCitizenInternalLastName;
    private javax.swing.JTextField txfCitizenInternalVaccinationStatus;
    private javax.swing.JTextField txfCitizenNewContactNumber;
    private javax.swing.JTextField txfCitizenNewFirstName;
    private javax.swing.JTextField txfCitizenNewLastName;
    private javax.swing.JTextField txfCitizenNewPersonalId;
    private javax.swing.JTextField txfHouseholdInternalOccupantsNumVaccinated;
    private javax.swing.JTextField txfHouseholdNewAddress;
    private javax.swing.JTextField txfHouseholdNewZipCode;
    private javax.swing.JTextField txfHouseholdOccupantAvgAge;
    private javax.swing.JTextField txfHouseholdRisk1;
    private javax.swing.JTextField txfHouseholdRisk2;
    private javax.swing.JTextField txfHouseholdRisk3;
    private javax.swing.JTextField txfHouseholdRisk4;
    private javax.swing.JTextField txfNewEmail;
    private javax.swing.JTextField txfNewUsername;
    private javax.swing.JTextField txfSupplyLeft;
    private javax.swing.JTextField txfTotalDoses;
    private javax.swing.JTextField txfTotalVaccinesUnaddress;
    private javax.swing.JTextField txfUserMessage;
    // End of variables declaration//GEN-END:variables

    //About Current User
    
    public boolean sortUp = false;

    public int userID;

    public Brand[] stockedBrandArr;
    public int currentBrandOnDisplayId;

    public HouseholdHandler householdHandler;

    public CitizenHandler citizenHandler;

    public CentreHandler centreHandler;

    public BrandHandler brandHandler;

    public VaccinationHandler vaccinationHandler ;

    public AcquisitionHandler acquisitionHandler;
    SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");

    
    //takes in nothing - facilitates login by verifying username and password and determining the current user profile - returns nothing
    public void beforeProgramme() {
        
        boolean userFound = false;
        
        String username;
        while (userFound == false) {
            username = JOptionPane.showInputDialog("Enter your username\n(new users need to ask an admin to add their profile)");
            if ((!"None supplied".equals(username)) && ((username) != null)) {
                try {
                    boolean result = false;
                    User[] usernameArr = CitizenHandler.getSafeUsers();
                    int position = 0;
                    
                    for (int i = 0; i < usernameArr.length; i++) {
                        
                        if(usernameArr[i].getUsername().equals(username)){
                            result = true;
                            position = i;
                            break;
                        }
                        
                    }
                    userID = usernameArr[position].getId();
                    
                    if (result) {
                        String password = usernameArr[position].getPassword();
                        if (password == "" || password == null) { //if new user first login after an admin added them
                            boolean match = false; //tracking whether the first and second attempt at the newly created password match
                            while (!match) { //continue to ask 
                                String newPassword = JOptionPane.showInputDialog("Welcome to the Covid Strategist!\nPlease create a new password:"); //first attempt
                                String secondPassword = JOptionPane.showInputDialog("Please re-enter password to confirm user profile:"); //second attempt
                                if (newPassword.equals(secondPassword)) {
                                    householdHandler = new HouseholdHandler();
                                    citizenHandler = new CitizenHandler(householdHandler, userID);
                                    
                                    User[] userArr = citizenHandler.getUserArr();
                                    position = CitizenHandler.findUserPos(userID, userArr);
                                    userArr[position].setPassword(newPassword);
                                    
                                    JOptionPane.showMessageDialog(this, "Your password has been successfully updated @" + username + "\nPlease restart application to gain access");
                                    match = true;
                                    System.exit(0);
                                } else {
                                    int response = JOptionPane.showConfirmDialog(this, "Passwords do match. Would you like to try again?");
                                    if (response!=JOptionPane.YES_OPTION){
                                        match = true;
                                        System.exit(0);
                                        
                                    }
                                    
                                }
                            }
                        } else { //if this is an old user with an already established password

                            boolean passwordCorrect = false;
                            String passwordAttempt = JOptionPane.showInputDialog("Enter your password:");
                            while (passwordCorrect == false) {
                                if (passwordAttempt.equals(password)) {
                                    passwordCorrect = true;
                                    userFound = true;
                                    ExternalHandler.writeToUserMessages(username, "Successful Login!");
                                } else if (passwordAttempt != null) {
                                    passwordAttempt = JOptionPane.showInputDialog("Incorrect password\nEnter your password:");
                                } else {
                                    ExternalHandler.writeToUserMessages(username, "Unsuccessful login");
                                    System.exit(0);
                                }
                            }
                        }
                    } else {
                        int response = JOptionPane.showConfirmDialog(this, "Error! User not found on file\nWould you like to re-enter username\n\nIf you are a new user, request an add\nFor added ");
                        if (response != JOptionPane.YES_OPTION) {
                            System.exit(0);
                        }
                    }
                } catch (NullPointerException e) {
                    System.exit(0);
                } 
            } else {
                System.exit(0);
            }
        }
        
    }

    //takes in nothing - method performing essential things that need to happen on application startup - returns nothing
    public void refreshProgramme() {
        //read from secondary memory

        getData();
        
        Household[] householdArr = householdHandler.getHouseholdArr();
        Citizen[] citizenArr = citizenHandler.getCitizenArr();
        Centre[] centreArr = centreHandler.getCentreArr();
        Brand[] brandArr = brandHandler.getBrandArr();
        Citizen[] notVaccinatedCitizenArr = citizenHandler.getNotVaccinatedCitizenArr();
        User[] userArr = citizenHandler.getUserArr();
        User currentUser = citizenHandler.getCurrentUser();
        Vaccination[] vaccinationArr = vaccinationHandler.getVaccinationArr();
        Acquisition[] acquisitionArr = acquisitionHandler.getAcquisitionArr();

        //GUI Refreshing
        if (currentUser.isIsAdmin() == true) {
            lblUserAccessLevel.setText("Administrator");
        } else {
            lblUserAccessLevel.setText("User");
        }
        lblUserUsername.setText(currentUser.getUsername());
        

        //display in elements relevant to the newly created arrays
        
        lstHousehold.setListData(householdArr);
        lstHousehold.setSelectedIndex(0);
        lstCitizen.setListData(citizenArr);
        lstCitizen.setSelectedIndex(0);
        lstCentre.setListData(centreArr);
        lstCentre.setSelectedIndex(0);
        lstBrand.setListData(brandArr);
        lstBrand.setSelectedIndex(0);

        cmbHouseholdArr.setModel(new DefaultComboBoxModel(householdArr));
        cmbAddVaccinationBrand.setModel(new DefaultComboBoxModel(brandArr));
        cmbAddVaccinationCitizen.setModel(new DefaultComboBoxModel(notVaccinatedCitizenArr));
        cmbAddVaccinationCentre.setModel(new DefaultComboBoxModel(centreArr));
        cmbMessageUser.setModel(new DefaultComboBoxModel(userArr));
        cmbNewUserCitizens.setModel(new DefaultComboBoxModel(citizenArr));
        cmbAcquisitionBrand.setModel(new DefaultComboBoxModel(brandArr));
        cmbCitizenHouseholdMove.setModel(new DefaultComboBoxModel(householdArr));
        cmbAcquisitionsCapeReserveBrands.setModel(new DefaultComboBoxModel(brandArr));

        lblCapeTownAddress.setText(acquisitionHandler.getReserveCentre().getStreetAddress());
        lblCapeTownZipCode.setText(acquisitionHandler.getReserveCentre().getZipCode());
        if (currentUser.getIsVaccinated()){
            lblStatus.setText("Vaccinated :)");
        } else {
            lblStatus.setText("Not vaccinated :(");
        
        }

        String brandInfo = "";
        txaUserInfoLog.setText("");

        //Brand info text approve
        for (int i = 0; i < brandArr.length; i++) {
            brandInfo += brandArr[i].getCommonName() + "\n";
            brandInfo += "Country of Origin: " + brandArr[i].getCountryOfOrigin() + "\n";
            brandInfo += "Efficacy Rate: " + (double) ((int) (brandArr[i].getEfficacyRate() * 100)) / 100 + "%\n\n";

        }
        txaBrandInfo.setText(brandInfo);

        DefaultTableModel model = (DefaultTableModel) tblCentreVaccines.getModel();
        model.setRowCount(0);

        //updateProgress();
        DefaultTableModel modelVaccine = (DefaultTableModel) tblAboutVaccinations.getModel();
        int numZipCodes = 0;
        String[] zipCodes = new String[householdArr.length];
        String free = "";
        for (int i = 0; i < householdArr.length; i++) {
            Household currentHousehold = householdArr[i];
            boolean newZip = true;
            for (int j = 0; j < zipCodes.length; j++) {
                if (currentHousehold.getZipCode().equals(zipCodes[j])) {
                    newZip = false;
                    break;
                }
            }
            if (newZip) {
                zipCodes[numZipCodes] = currentHousehold.getZipCode();
                numZipCodes++;
            }
        }
        modelVaccine.setRowCount(numZipCodes);

        for (int i = 0; i < numZipCodes; i++) {
            modelVaccine.setValueAt(zipCodes[i], i, 0);

            int[] riskOne = citizenHandler.findNumZipCode(zipCodes[i], 1);
            modelVaccine.setValueAt(riskOne[0] + "/" + riskOne[1], i, 1);
            int[] riskTwo = citizenHandler.findNumZipCode(zipCodes[i], 2);
            modelVaccine.setValueAt(riskTwo[0] + "/" + riskTwo[1], i, 2);
            int[] riskThree = citizenHandler.findNumZipCode(zipCodes[i], 3);
            modelVaccine.setValueAt(riskThree[0] + "/" + riskThree[1], i, 3);
            int[] riskFour = citizenHandler.findNumZipCode(zipCodes[i], 4);
            modelVaccine.setValueAt(riskFour[0] + "/" + riskFour[1], i, 4);

        }

        lblwelcome.setText("Welcome, " + currentUser.getFullName()+ "!");
        lblUserOwnName.setText(currentUser.getFullName());
        lblUserHomeAddress.setText(currentUser.getHousehold().getStreetAddress());
        lblUserName.setText("@" + currentUser.getUsername());
        lblEmail.setText(currentUser.getEmail());

        txaUserInfoLog.setText("");
        txaUserInfoLog.setText(ExternalHandler.readUserMessages(currentUser.getUsername()));

        txfTotalVaccinesUnaddress.setText(formatNumber(acquisitionHandler.getReserveCentre().getAvailableVaccines()));

        //About 
        lblInfoVaccineCentres.setText("" + centreArr.length);
        lblInfoVaccinesAdministered.setText("" + vaccinationArr.length);
        lblRegisteredCitizens.setText("" + citizenArr.length);

        if (brandArr.length > 0) {
            currentBrandOnDisplayId = brandArr[0].getId();
            Brand currentBrand = brandArr[findBrandPos(currentBrandOnDisplayId)];
            txaBrandInfo.setText(currentBrand.getCommonName() + "\nCountry of Origin: " + currentBrand.getCountryOfOrigin() + "\nEfficacy Rate: " + currentBrand.getEfficacyRate() + "%");

        }
        try {
            txaUserInfoLog.setText("");
            BufferedReader reader = new BufferedReader(new FileReader("user_log.txt"));
            String line = reader.readLine();
            String[] messages = line.split("#");
            for (int i = 0; i < messages.length; i = i + 2) {
                if (messages[i].equals(currentUser.getUsername())) {
                    txaUserInfoLog.setText(txaUserInfoLog.getText() + messages[i + 1] + "\n");
                }
            }
        } catch (IOException ex) {
            txaUserInfoLog.setText("The user log could not be read in this time");
        }
        
    }

    public void getData() { //takes in nothing - uses methods to read from the data on file - returns nothing
        
        householdHandler = new HouseholdHandler();
        citizenHandler = new CitizenHandler( householdHandler,userID);
        readCentre();
        readBrand();
        readAcquisition();
        readVaccination();
    }
    
    //takes in nothing - supplies all relevant gui elements with data related to vaccinations - returns nothing
    public void readVaccination() {
        Citizen[] citizenArr = citizenHandler.getCitizenArr();
        Brand[] brandArr = brandHandler.getBrandArr();
        Centre[] centreArr = centreHandler.getCentreArr();
        
        vaccinationHandler = new VaccinationHandler( citizenArr, brandArr, centreArr);
        
        Vaccination[] vaccinationArr = vaccinationHandler.getVaccinationArr();
        
        DefaultTableModel model = (DefaultTableModel) tblVaccination.getModel();

        int rowCount = tblVaccination.getRowCount();

        for (int x = rowCount - 1; x >= 0; x--) {
            model.removeRow(x);
        }
        model.setRowCount(vaccinationArr.length);
        populateVaccinationTable();

    }
    
    //takes in nothing populates the vaccination table with data returns nothing
    public void populateVaccinationTable() {
        Vaccination[] vaccinationArr = vaccinationHandler.getVaccinationArr();
        for (int count = 0; count < vaccinationArr.length; count++) {
            tblVaccination.setValueAt(vaccinationArr[count].getDate(), count, 0);
            tblVaccination.setValueAt(vaccinationArr[count].getCentre().getName(), count, 1);
            tblVaccination.setValueAt(vaccinationArr[count].getCitizen().getFirstName() + " " + vaccinationArr[count].getCitizen().getLastName(), count, 2);
            tblVaccination.setValueAt(vaccinationArr[count].getBrand().getCommonName(), count, 3);
            tblVaccination.setRowSelectionInterval(0, 0);
        }
    }
    
    //takes in nothing and instantiates a centrehandler object returns nothing
    public void readCentre() {
        centreHandler = new CentreHandler();
    }
    
    //takes in nothing and instantiates a brandhandler object
    public void readBrand() {
        brandHandler = new BrandHandler();
    }

    public void readAcquisition() {
        Centre[] centreArr = centreHandler.getCentreArr();
        Brand[] brandArr = brandHandler.getBrandArr();
        acquisitionHandler = new AcquisitionHandler( centreArr, brandArr);
    }

    //General Helper Classes
    //Formats spacing on display numbers
    public String formatNumber(int origNum) {
        String finalNum = "";
        if (origNum < 1000) {
            finalNum = "" + origNum;
        } else if (origNum >= 1000 && origNum < 1000000) {
            finalNum = "" + ("" + origNum).substring(0, ("" + origNum).length() - 3) + " " + ("" + origNum).substring(("" + origNum).length() - 3);
        } else {
            finalNum = "" + ("" + origNum).substring(0, ("" + origNum).length() - 6) + " " + ("" + origNum).substring(0, ("" + origNum).length() - 3) + " " + ("" + origNum).substring(("" + origNum).length() - 3);
        }
        return finalNum;
    }

    //Format coordinates to be readable to humans
    public static String getCoordinatesString(String coordinates) {
        String[] details = coordinates.split(",");
        return details[0].substring(1) + "S " + details[1] + "E";
    }

    public static double[] getDecimalCoordinates(int latDeg, int latMin, int latSec, int longDeg, int longMin, int longSec) {
        double[] coordinates = new double[2];
        coordinates[0] = (double) latDeg + (double) latMin / 60.0 + (double) latSec / 3600.0;
        coordinates[1] = (double) longDeg + (double) longMin / 60.0 + (double) longSec / 3600.0;
        return coordinates;
    }

    //Find distance between two places
    public static double getDistanceKilometres(String coordinates1, String coordinates2) {
        final int R = 6371; // Radius of the earth in km
        String[] coordinatesArr1 = coordinates1.split(",");
        String[] coordinatesArr2 = coordinates2.split(",");
        double lat1 = Double.parseDouble(coordinatesArr1[0]);
        double lon1 = Double.parseDouble(coordinatesArr1[1]);
        double lat2 = Double.parseDouble(coordinatesArr2[0]);
        double lon2 = Double.parseDouble(coordinatesArr2[1]);

        var dLat = (lat2 - lat1) * (Math.PI / 180);  // deg2rad below
        var dLon = (lon2 - lon1) * (Math.PI / 180);
        var a
                = Math.sin(dLat / 2) * Math.sin(dLat / 2)
                + Math.cos((lat1) * (Math.PI / 180)) * Math.cos((lat2) * (Math.PI / 180))
                * Math.sin(dLon / 2) * Math.sin(dLon / 2);
        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        var d = R * c; // Distance in km
        return d;

    }

    

    //Brand Helper Methods
    public int findBrandPos(int soughtId) {
        int position = -1;
        Brand[] brandArr = brandHandler.getBrandArr();
        for (int i = 0; i < brandArr.length; i++) {

            if (brandArr[i].getId() == soughtId) {
                position = i;
            }
        }

        return position;
    }
    
    //finds the id of the closest household to a centre that is taken in
    public int getClosestHousehold(Centre currentCentre) {
        int lowestId = 0;
        Household[] householdArr = householdHandler.getHouseholdArr();
        double lowestDistance = getDistanceKilometres(currentCentre.getCoordinates(), householdArr[0].getCoordinates()); //default lowest distance is the distance from first centre in array because the rest will be analysed as well
        for (int i = 0; i < householdArr.length; i++) {
            double distance = getDistanceKilometres(currentCentre.getCoordinates(), householdArr[i].getCoordinates()); //find distance
            if (distance < lowestDistance) { //if lowest centre that has vaccines left so far
                lowestDistance = distance; //lowest becomes this if lower
                lowestId = i; //required id
            }

        }

        return lowestId;
    }
    
    //takes in a number and adds zeros to it
    public static String makelong(int formatNum, int needLength) {
        String newNum = "" + formatNum;
        if (newNum.length() <= needLength) {
            int length = needLength - newNum.length();
            for (int i = 0; i < length; i++) {
                newNum = "0" + newNum;
            }
        }
        return newNum;
    }

    

    //GUI Handling - switching panel
    public void switchPanel(javax.swing.JPanel newPanel, javax.swing.JDesktopPane newDesktopPane) {
        newDesktopPane.removeAll();
        newDesktopPane.add(newPanel);
        newDesktopPane.repaint();
        newDesktopPane.validate();
    }

    

    //Method updating the table to shoe where vaccinations of a certain brand are distributed
    private void updateAcquisitionTable(Brand currentBrand) { //the acquisition table with data
        //clearing the content of table
        DefaultTableModel model = (DefaultTableModel) tblCentreVaccines.getModel();
        Centre[] centreArr = centreHandler.getCentreArr();
        Vaccination[] vaccinationArr = vaccinationHandler.getVaccinationArr();
        Acquisition[] acquisitionArr = acquisitionHandler.getAcquisitionArr();
        int rowCount = model.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }

        //find out how many rows are required
        rowCount = 0; //variable tracking number

        //variable tracking total vaccines received of thr brand
        for (int i = 0; i < centreArr.length; i++) {
            int total = 0;
            for (int x = 0; x < acquisitionArr.length; x++) {
                //checking if a certain centre has received vaccines
                if (acquisitionArr[x].getBrand().getId() == (currentBrand).getId() && acquisitionArr[x].getCentre().getId() == centreArr[i].getId()) {
                    total = total + acquisitionArr[x].getDoses();
                }

            }

            //if has received vaccine, it should be displayed so it needs a row
            if (total > 0) {
                rowCount++;
            }

        }

        //table given the rows required
        model.setRowCount(rowCount + 1);

        rowCount = 0; //variable now tracking which row to populate
        int num = 0;
        for (int i = 0; i < centreArr.length; i++) {
            int total = 0;
            int totalLeft = 0;
            for (int x = 0; x < acquisitionArr.length; x++) {
                if (acquisitionArr[x].getBrand().getId() == (currentBrand).getId() && acquisitionArr[x].getCentre().getId() == centreArr[i].getId()) {
                    total = total + acquisitionArr[x].getDoses();
                }
            }
            totalLeft = total;
            for (int x = 0; x < vaccinationArr.length; x++) {
                if (vaccinationArr[x].getBrand().getId() == (currentBrand).getId() && vaccinationArr[x].getCentre().getId() == centreArr[i].getId()) {
                    totalLeft = totalLeft - 1;
                }
            }

            if (total > 0) {
                tblCentreVaccines.setValueAt(centreArr[i].getName(), rowCount, 0);
                tblCentreVaccines.setValueAt(formatNumber(total), rowCount, 1);
                tblCentreVaccines.setValueAt(formatNumber(totalLeft), rowCount, 2);
                rowCount++;
                num = num + total;
            }
        }

        int total = 0;
        for (int x = 0; x < acquisitionArr.length; x++) {
            if (acquisitionArr[x].getBrand().getId() == (currentBrand).getId()) {
                if (acquisitionArr[x].getCentre().getId() == -1) {
                    total = total + acquisitionArr[x].getDoses();
                    num = num + acquisitionArr[x].getDoses();
                } else {
                    num = num - acquisitionArr[x].getDoses();
                }
            }
        }
        tblCentreVaccines.setValueAt("THE CAPE TOWN RESERVE", rowCount, 0);
        tblCentreVaccines.setValueAt(total, rowCount, 1);
        tblCentreVaccines.setValueAt(total - (currentBrand.getSupplyReceived()), rowCount, 2);
        
    }

    public void startUpGUIFormat() { //Adds theme to app
        
        Color main = new Color(171, 186, 183);

        Font font = btnHouseholdPanel.getFont();

        for (int i = 0; i < desktoppnlContainer.getComponentCount(); i++) {
            if (desktoppnlContainer.getComponent(i) instanceof JPanel) {
                ((JPanel) desktoppnlContainer.getComponent(i)).setBackground(main);
                //desktoppnlPanelContainer.getComponent(i).setFont(f);
            }
        }

        switchPanel(pnlHomeScreen, desktoppnlContainer);
        pnlHomeScreen.setBackground(Color.white);

        ImageIcon background = new ImageIcon(new ImageIcon("background.png").getImage().getScaledInstance(1150, 680, Image.SCALE_SMOOTH));
        lblBackground.setIcon(background);
        ImageIcon logo = new ImageIcon(new ImageIcon("logo.png").getImage().getScaledInstance(160, 160, Image.SCALE_SMOOTH));
        lblLogo.setIcon(logo);
       
        ImageIcon cptImage = new ImageIcon(new ImageIcon("capetownimage.jpeg").getImage().getScaledInstance(271, 161, Image.SCALE_SMOOTH));
        lblCapeTownImage.setIcon(cptImage);

    }

    
    public void enableOutsideApp (boolean bool) {
        btnUserManagement.setEnabled(bool);
        btnNewVaccinationPanel.setEnabled(bool);
        btnVaccinationPanel.setEnabled(bool);
        btnCentrePanel.setEnabled(bool);
        btnHouseholdPanel.setEnabled(bool);
        btnCitizenPanel.setEnabled(bool);
        btnAcquisitionsPanel.setEnabled(bool);
        btnOurProgressPanel.setEnabled(bool);
        btnHelpPanel.setEnabled(bool);
        lblLogoWavebreaker.setEnabled(bool);
    }
}
